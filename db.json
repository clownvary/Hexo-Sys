{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/Images/down.png","path":"Images/down.png","modified":0,"renderable":0},{"_id":"source/demo/down.png","path":"demo/down.png","modified":0,"renderable":0},{"_id":"themes/yilia/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/6481427.jpeg","path":"img/6481427.jpeg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/coderwall.png","path":"img/coderwall.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/delicious.png","path":"img/delicious.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/douban.png","path":"img/douban.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/github.png","path":"img/github.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/facebook.png","path":"img/facebook.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/google.png","path":"img/google.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/img-err.png","path":"img/img-err.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/img-loading.png","path":"img/img-loading.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/linkedin.png","path":"img/linkedin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/pinterest.png","path":"img/pinterest.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/pinboard.png","path":"img/pinboard.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/mail.png","path":"img/mail.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/stackoverflow.png","path":"img/stackoverflow.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/rss.png","path":"img/rss.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/weibo.png","path":"img/weibo.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/zhihu.png","path":"img/zhihu.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/js/jquery.lazyload.js","path":"js/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/js/pc.js","path":"js/pc.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/twitter.png","path":"img/twitter.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/js/instagram.js","path":"js/instagram.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/js/mobile.js","path":"js/mobile.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svgz","path":"css/fonts/fontawesome-webfont.svgz","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"e4205a1204bd2c2dcfb96281f688f9567945cbc1","modified":1474371485000},{"_id":"themes/yilia/_config.yml","hash":"2386938c4d606aa9a29583ae561281594d689f16","modified":1471105099000},{"_id":"themes/yilia/.DS_Store","hash":"9408c90734d6165546919bffeba13ca24d2c9057","modified":1469377702000},{"_id":"themes/yilia/README.md","hash":"f0f05d6cc90a737f769dd9286f64dd8f6bf8a1e4","modified":1466395463000},{"_id":"themes/yilia/package.json","hash":"00357ef6f24eb049074da81809e98f973f528cca","modified":1466395463000},{"_id":"source/Images/down.png","hash":"b7d4741abec5f3c539269b652ad4cee723b7e522","modified":1480951664000},{"_id":"source/_posts/.DS_Store","hash":"6e6db803b1c3ba50b3248cc5ce4168d1bba35603","modified":1474371417000},{"_id":"source/_posts/hexo文件夹配置.md","hash":"7d4767e51dbe38f7aceda4ef9654b84ba1e0f32d","modified":1480951880000},{"_id":"source/_posts/angular2新手上路.md","hash":"3e25b19ad5413bf3273eae124978c2d18dc18eb7","modified":1480951090000},{"_id":"source/_posts/TypeScript新手注意.md","hash":"909377b430ee0df560711719315a7c2006ae575b","modified":1480951090000},{"_id":"source/_posts/vue易错笔记.md","hash":"94522494e3a2c284b1e05c6da1f04dbf669096cc","modified":1480991626436},{"_id":"source/_posts/前端恢复之路.md","hash":"dabacb8408f05ff222f8593aadd5960da53bc5b1","modified":1473958592000},{"_id":"source/demo/down.png","hash":"b7d4741abec5f3c539269b652ad4cee723b7e522","modified":1480951664000},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1466395463000},{"_id":"themes/yilia/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1466395463000},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1466395463000},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1466395463000},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1466395463000},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1466395463000},{"_id":"themes/yilia/layout/layout.ejs","hash":"4a5566f704f3246f5ef77badddf18d2e16750328","modified":1466395463000},{"_id":"themes/yilia/source/.DS_Store","hash":"7dc1388212b36f3fd592913c9408f5bf2aa9fb75","modified":1469382680000},{"_id":"source/_posts/hexo文件夹配置/down.png","hash":"b7d4741abec5f3c539269b652ad4cee723b7e522","modified":1480951664000},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"082504c9fd8600306d4ca55f03e3cbb0ddd99dd7","modified":1466395463000},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"8dfb6d68aa8a0661d26c32ce1ce1f45815364c3a","modified":1466395463000},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1466395463000},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"ef8dd558f908f293c34123c0b7ff879d2fd0c09f","modified":1466395463000},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1466395463000},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"963c106412a3ab142871976978ecc9884aeca17a","modified":1466395463000},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1466395463000},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1466395463000},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"70a9951e4e2d30aabba88e75c3fa54b9235ce6a6","modified":1466395463000},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"54fab4d3d64cb937d6baec7324ffabf9f202b883","modified":1466395463000},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"cd0af87ee781ac9c2b0e6a2a05b063d4bd497d9c","modified":1466395463000},{"_id":"themes/yilia/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1466395463000},{"_id":"themes/yilia/source/css/_variables.styl","hash":"5e37a6571caf87149af83ac1cc0cdef99f117350","modified":1466395463000},{"_id":"themes/yilia/source/css/style.styl","hash":"67cd4b3df4e36f80b4ba40ce97722b19480c753e","modified":1466395463000},{"_id":"themes/yilia/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1466395463000},{"_id":"themes/yilia/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1466395463000},{"_id":"themes/yilia/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1466395463000},{"_id":"themes/yilia/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1466395463000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.css","hash":"b6aa6692c2e5f8bd74d96827b78570f0c5683c20","modified":1466395463000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.js","hash":"a82597493d75ea989ca586e09173cff332efe41e","modified":1466395463000},{"_id":"themes/yilia/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1466395463000},{"_id":"themes/yilia/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1466395463000},{"_id":"themes/yilia/source/img/.DS_Store","hash":"06a76ddea82fac7b0923ea9e01eccf1d0073b227","modified":1469377895000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1466395463000},{"_id":"themes/yilia/source/img/6481427.jpeg","hash":"cf082176cbed0fe8021e528d9c4e9307bb953bd1","modified":1469382912000},{"_id":"themes/yilia/source/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1466395463000},{"_id":"themes/yilia/source/img/delicious.png","hash":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1466395463000},{"_id":"themes/yilia/source/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1466395463000},{"_id":"themes/yilia/source/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1466395463000},{"_id":"themes/yilia/source/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1466395463000},{"_id":"themes/yilia/source/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1466395463000},{"_id":"themes/yilia/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1466395463000},{"_id":"themes/yilia/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1466395463000},{"_id":"themes/yilia/source/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1466395463000},{"_id":"themes/yilia/source/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1466395463000},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1466395463000},{"_id":"themes/yilia/source/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1466395463000},{"_id":"themes/yilia/source/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1466395463000},{"_id":"themes/yilia/source/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1466395463000},{"_id":"themes/yilia/source/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1466395463000},{"_id":"themes/yilia/source/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1466395463000},{"_id":"themes/yilia/source/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1466395463000},{"_id":"themes/yilia/source/js/jquery.lazyload.js","hash":"c11a2e7b330d16d06feabd0a8477099adf9d6799","modified":1466395463000},{"_id":"themes/yilia/source/js/main.js","hash":"0640b68a76fab3c693b3cd1e4d04d14be1e53940","modified":1466395463000},{"_id":"themes/yilia/source/js/pc.js","hash":"fdbc039fc9ffa70815b5fc4daaa587ae29693f10","modified":1466395463000},{"_id":"themes/yilia/source/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1466395463000},{"_id":"themes/yilia/source/js/instagram.js","hash":"f19adbcc0dac33536bc6660598059048ec901882","modified":1466395463000},{"_id":"themes/yilia/source/js/mobile.js","hash":"b68cc01d24e80973c48205f551da87f3f3427644","modified":1466395463000},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"d19dee2082528e1844bed3aa4e4bd59f15fd7a7a","modified":1466395463000},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"d4f0e36f9a2167e91082dbd7d52425a06d2bebbf","modified":1466395463000},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"c0c988334e857a77ba455a056dfa21809e7e76a5","modified":1466395463000},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1466395463000},{"_id":"themes/yilia/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1466395463000},{"_id":"themes/yilia/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1466395463000},{"_id":"themes/yilia/source/css/_partial/archive.styl","hash":"b087976b3081b7ca0e2567e47a6c345b1328ad95","modified":1466395463000},{"_id":"themes/yilia/source/css/_partial/article.styl","hash":"7dd9f71e4d80d15d6ce929659c517ee0c883b340","modified":1466395463000},{"_id":"themes/yilia/source/css/_partial/footer.styl","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1466395463000},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"da39b4ba0c0ce4e1932fd45c5aee10e8aca41f28","modified":1466395463000},{"_id":"themes/yilia/source/css/_partial/highlight.styl","hash":"56830a5100b31663e1f49b36d00e031ec14aae63","modified":1466395463000},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"78612cfc091d7d861a70455a0dc8c3036e460879","modified":1466395463000},{"_id":"themes/yilia/source/css/_partial/instagram.styl","hash":"4de333144b00c58a5d41d682d83f78794f75d19d","modified":1466395463000},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1466395463000},{"_id":"themes/yilia/source/css/_partial/mobile-slider.styl","hash":"96eee8fb0d3f1108eae9a04682d4bbd0e968be22","modified":1466395463000},{"_id":"themes/yilia/source/css/_partial/main.styl","hash":"51a1ad07b7c747af33d08407b0becd640556dd4f","modified":1466395463000},{"_id":"themes/yilia/source/css/_partial/page.styl","hash":"97371f551ed051780f8632142ea00a705d76c845","modified":1466395463000},{"_id":"themes/yilia/source/css/_partial/mobile.styl","hash":"b574fe7d3b5913ab66353da3350fd70815def1a5","modified":1466395463000},{"_id":"themes/yilia/source/css/_partial/scroll.styl","hash":"a0bd4b253b28f694de59bec217f48f59f92cbaf2","modified":1466395463000},{"_id":"themes/yilia/source/css/_partial/share.styl","hash":"6ac15a6815b1bbdbea89d3fe933c2821aa80b926","modified":1466395463000},{"_id":"themes/yilia/source/css/_partial/tagcloud.styl","hash":"7aa04be2deea835aeef08e9908c4658cb8933ee2","modified":1466395463000},{"_id":"themes/yilia/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1466395463000},{"_id":"themes/yilia/source/css/_partial/wheelmenu.styl","hash":"74630c56944e27bef53ef0c0e391611a2eec2ed0","modified":1466395463000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.eot","hash":"3ce87b82c7a4ffdf65e96765c2ffda10b1a283c6","modified":1466395463000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.woff","hash":"cafc4ac5761a0a252d33dce4ea3952cf9a38d832","modified":1466395463000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.ttf","hash":"1480b8101b02da9bc4c60341b5e185e63e585064","modified":1466395463000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svgz","hash":"4bfdd33ed702e32ae01399fcc2652377f78e7626","modified":1466395463000},{"_id":"themes/yilia/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1466395463000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1466395463000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1466395463000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1466395463000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1466395463000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1466395463000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svg","hash":"23a6f5b2ff76de9cb3cf1e886194c67647fd868a","modified":1466395463000},{"_id":"public/atom.xml","hash":"0335bcb4eb85450776bdbc072863d96f106311a8","modified":1480991649882},{"_id":"public/sitemap.xml","hash":"62ae34ccef48b5591afb27f14db274253480988e","modified":1480991649932},{"_id":"public/2016/12/05/hexo文件夹配置/index.html","hash":"d4790a71f492a018b9b120946b991baeadf7546c","modified":1480951919051},{"_id":"public/2016/12/04/angular2新手上路/index.html","hash":"957721b2016107aa99bf38cecf31ef39bbc5ccba","modified":1480991650092},{"_id":"public/archives/index.html","hash":"5b3facf4d52272a57c8d3d8be28db80ad7f4bdb7","modified":1480991650092},{"_id":"public/archives/2016/index.html","hash":"76a20d9712919cfe631fcbbdd03055b696b1da40","modified":1480991650092},{"_id":"public/archives/2016/07/index.html","hash":"995d8aa1148fdd9897d2129adbc57552a9cbc08f","modified":1480951919052},{"_id":"public/archives/2016/11/index.html","hash":"366d7c1af584ed91a17184c2a576b62141e9b10b","modified":1480991650092},{"_id":"public/archives/2016/12/index.html","hash":"7222527b3ab36ba9b2eb910659264114730b32e4","modified":1480951919052},{"_id":"public/index.html","hash":"ac1feacc0bcdda4aee442a3c7177b7d8b8fbcdef","modified":1480991650093},{"_id":"public/tags/配置/index.html","hash":"2d7f596704bd85d3a2518853f7630017712841a3","modified":1480951919052},{"_id":"public/tags/hexo/index.html","hash":"817cac5a83bb4c45028429e888e71cc9a34107b5","modified":1480951919053},{"_id":"public/tags/笔记/index.html","hash":"9c72e54ee04fe24f552806bf74930dbc59686f91","modified":1480951919053},{"_id":"public/tags/angular2/index.html","hash":"ec07e63c900834755017a498e1cf449397d973ff","modified":1480991529174},{"_id":"public/tags/新手注意/index.html","hash":"3764ab3400dd0377a1b226ceda1b57efbe833040","modified":1480991529174},{"_id":"public/tags/学习/index.html","hash":"c91b1cc5f4169e89cd8ac1799d67cd39c6b5d6a8","modified":1480991650092},{"_id":"public/tags/TypeScript/index.html","hash":"8f1c1b970b7b6f60c339dbe8c33c0d2fe304aa58","modified":1480991529174},{"_id":"public/tags/注意事项/index.html","hash":"018fadba8e6183deb7a4c185e7defd93c935ffc3","modified":1480991529174},{"_id":"public/tags/前端/index.html","hash":"73eea301194afd7b135ac7257aecafe45f24214f","modified":1480991650092},{"_id":"public/tags/html/index.html","hash":"0d28591e42f47db22aac2cf885e7b4959fa87fc5","modified":1480991650093},{"_id":"public/tags/js/index.html","hash":"5c877b17ecf62d537084e8504d6638606bc263eb","modified":1480991650093},{"_id":"public/tags/css/index.html","hash":"c4ddb38b3e0140da5d4b2afee906683f6026aead","modified":1480991650093},{"_id":"public/tags/vue/index.html","hash":"0ef4914a1b096d5e68b89c59985da570192550d8","modified":1480991650093},{"_id":"public/tags/angular/index.html","hash":"fde674b17e31fff01f04d42b044f30d3a9be2631","modified":1480951919054},{"_id":"public/tags/react/index.html","hash":"c265a65970997412a8f0d64d36c010e395c2cd69","modified":1480951919054},{"_id":"public/2016/12/04/TypeScript新手注意/index.html","hash":"3e2b64897151fd68838852fb1c9e5735992147b7","modified":1480991529174},{"_id":"public/2016/11/18/vue易错笔记/index.html","hash":"00c34d6e918e2e1fba53b93500a7380d5b4da5b5","modified":1480991650093},{"_id":"public/2016/07/22/前端恢复之路/index.html","hash":"3f6a296694cde0d7bf91cf296518a756f7edcdf1","modified":1480991650093},{"_id":"public/demo/down.png","hash":"b7d4741abec5f3c539269b652ad4cee723b7e522","modified":1480951919064},{"_id":"public/Images/down.png","hash":"b7d4741abec5f3c539269b652ad4cee723b7e522","modified":1480951919064},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1480951919064},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1480951919065},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1480951919065},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1480951919065},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1480951919065},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1480951919065},{"_id":"public/img/6481427.jpeg","hash":"cf082176cbed0fe8021e528d9c4e9307bb953bd1","modified":1480951919065},{"_id":"public/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1480951919065},{"_id":"public/img/delicious.png","hash":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1480951919065},{"_id":"public/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1480951919065},{"_id":"public/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1480951919065},{"_id":"public/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1480951919065},{"_id":"public/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1480951919065},{"_id":"public/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1480951919065},{"_id":"public/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1480951919065},{"_id":"public/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1480951919065},{"_id":"public/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1480951919065},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1480951919065},{"_id":"public/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1480951919065},{"_id":"public/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1480951919065},{"_id":"public/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1480951919065},{"_id":"public/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1480951919065},{"_id":"public/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1480951919065},{"_id":"public/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1480951919065},{"_id":"public/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1480951919065},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"cafc4ac5761a0a252d33dce4ea3952cf9a38d832","modified":1480951919065},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"3ce87b82c7a4ffdf65e96765c2ffda10b1a283c6","modified":1480951919065},{"_id":"public/css/fonts/fontawesome-webfont.svgz","hash":"4bfdd33ed702e32ae01399fcc2652377f78e7626","modified":1480951919065},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"1480b8101b02da9bc4c60341b5e185e63e585064","modified":1480951919065},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1480951919066},{"_id":"public/2016/12/05/hexo文件夹配置/down.png","hash":"b7d4741abec5f3c539269b652ad4cee723b7e522","modified":1480951919066},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"23a6f5b2ff76de9cb3cf1e886194c67647fd868a","modified":1480951919617},{"_id":"public/fancybox/jquery.fancybox.css","hash":"b6aa6692c2e5f8bd74d96827b78570f0c5683c20","modified":1480951919622},{"_id":"public/js/jquery.lazyload.js","hash":"c11a2e7b330d16d06feabd0a8477099adf9d6799","modified":1480951919622},{"_id":"public/js/main.js","hash":"0640b68a76fab3c693b3cd1e4d04d14be1e53940","modified":1480951919622},{"_id":"public/js/pc.js","hash":"fdbc039fc9ffa70815b5fc4daaa587ae29693f10","modified":1480951919623},{"_id":"public/js/instagram.js","hash":"f19adbcc0dac33536bc6660598059048ec901882","modified":1480951919623},{"_id":"public/js/mobile.js","hash":"b68cc01d24e80973c48205f551da87f3f3427644","modified":1480951919623},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1480951919623},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1480951919623},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1480951919623},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1480951919623},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1480951919624},{"_id":"public/css/style.css","hash":"e56554c624d9d49e9429eeeb9222488f8df634ec","modified":1480951919624},{"_id":"public/fancybox/jquery.fancybox.js","hash":"a82597493d75ea989ca586e09173cff332efe41e","modified":1480951919624},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1480951919624}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"hexo文件夹配置","date":"2016-12-05T07:46:22.000Z","_content":"Hexo 在写文章时，如果需要引用资源文件比如图片，可以直接使用url也可以使用本地资源，url不用说了，本地资源配置如下：\n<!--more-->\n有两种方法可以访问到本地资源\n\n\n1.应用级资源文件夹形式\n\n- 在source目录下建立Images文件夹，放入图片\n- 文章中引用`![引用图片](/Images/xxx.png)`\n- hexo s发布测试，就可以看到，如果直接预览markdown格式不行，必须要本地服务启动测试才行\n- 我来自／source/Images目录![img](/Images/down.png)\n\t\n2.子目录文件夹形式\n\n- 在＿config.yml中修改配置项`post_asset_folder: true` 开启功能\n- 之后每次hexo new ...文章时会同时生成一个同名的文件夹，把该文章的图片放进去\n- 访问格式{% asset_img xxx.jpg This is an example image %},不能直接用markdown格式引入\n- 我来自内部目录{% asset_img down.png this is img from folder %}\n","source":"_posts/hexo文件夹配置.md","raw":"title: hexo文件夹配置\ndate: 2016-12-05 15:46:22\ntags: [配置, hexo, 笔记]\n---\nHexo 在写文章时，如果需要引用资源文件比如图片，可以直接使用url也可以使用本地资源，url不用说了，本地资源配置如下：\n<!--more-->\n有两种方法可以访问到本地资源\n\n\n1.应用级资源文件夹形式\n\n- 在source目录下建立Images文件夹，放入图片\n- 文章中引用`![引用图片](/Images/xxx.png)`\n- hexo s发布测试，就可以看到，如果直接预览markdown格式不行，必须要本地服务启动测试才行\n- 我来自／source/Images目录![img](/Images/down.png)\n\t\n2.子目录文件夹形式\n\n- 在＿config.yml中修改配置项`post_asset_folder: true` 开启功能\n- 之后每次hexo new ...文章时会同时生成一个同名的文件夹，把该文章的图片放进去\n- 访问格式{% asset_img xxx.jpg This is an example image %},不能直接用markdown格式引入\n- 我来自内部目录{% asset_img down.png this is img from folder %}\n","slug":"hexo文件夹配置","published":1,"updated":"2016-12-05T15:31:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwc8j8nj0000jh9knu8g7vae","content":"<p>Hexo 在写文章时，如果需要引用资源文件比如图片，可以直接使用url也可以使用本地资源，url不用说了，本地资源配置如下：<br><a id=\"more\"></a><br>有两种方法可以访问到本地资源</p>\n<p>1.应用级资源文件夹形式</p>\n<ul>\n<li>在source目录下建立Images文件夹，放入图片</li>\n<li>文章中引用<code>![引用图片](/Images/xxx.png)</code></li>\n<li>hexo s发布测试，就可以看到，如果直接预览markdown格式不行，必须要本地服务启动测试才行</li>\n<li>我来自／source/Images目录<img src=\"/Images/down.png\" alt=\"img\"></li>\n</ul>\n<p>2.子目录文件夹形式</p>\n<ul>\n<li>在＿config.yml中修改配置项<code>post_asset_folder: true</code> 开启功能</li>\n<li>之后每次hexo new …文章时会同时生成一个同名的文件夹，把该文章的图片放进去</li>\n<li>访问格式,不能直接用markdown格式引入</li>\n<li>我来自内部目录<img src=\"/2016/12/05/hexo文件夹配置/down.png\" alt=\"this is img from folder\" title=\"this is img from folder\"></li>\n</ul>\n","excerpt":"<p>Hexo 在写文章时，如果需要引用资源文件比如图片，可以直接使用url也可以使用本地资源，url不用说了，本地资源配置如下：<br>","more":"<br>有两种方法可以访问到本地资源</p>\n<p>1.应用级资源文件夹形式</p>\n<ul>\n<li>在source目录下建立Images文件夹，放入图片</li>\n<li>文章中引用<code>![引用图片](/Images/xxx.png)</code></li>\n<li>hexo s发布测试，就可以看到，如果直接预览markdown格式不行，必须要本地服务启动测试才行</li>\n<li>我来自／source/Images目录<img src=\"/Images/down.png\" alt=\"img\"></li>\n</ul>\n<p>2.子目录文件夹形式</p>\n<ul>\n<li>在＿config.yml中修改配置项<code>post_asset_folder: true</code> 开启功能</li>\n<li>之后每次hexo new …文章时会同时生成一个同名的文件夹，把该文章的图片放进去</li>\n<li>访问格式,不能直接用markdown格式引入</li>\n<li>我来自内部目录<img src=\"/2016/12/05/hexo文件夹配置/down.png\" alt=\"this is img from folder\" title=\"this is img from folder\"></li>\n</ul>"},{"title":"angular2新手上路","date":"2016-12-03T16:52:49.000Z","_content":"\n### 配置\n- tsconfig设置\n\n\t\n\n- tslint设置\n\t\n\t`tslint -i`生成默认配置文件","source":"_posts/angular2新手上路.md","raw":"title: angular2新手上路\ndate: 2016-12-04 00:52:49\ntags: [angular2, 新手注意, 学习]\n---\n\n### 配置\n- tsconfig设置\n\n\t\n\n- tslint设置\n\t\n\t`tslint -i`生成默认配置文件","slug":"angular2新手上路","published":1,"updated":"2016-12-05T15:18:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwc8j8no0001jh9kpuess999","content":"<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><ul>\n<li>tsconfig设置</li>\n</ul>\n<ul>\n<li><p>tslint设置</p>\n<p>  <code>tslint -i</code>生成默认配置文件</p>\n</li>\n</ul>\n","excerpt":"","more":"<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><ul>\n<li>tsconfig设置</li>\n</ul>\n<ul>\n<li><p>tslint设置</p>\n<p>  <code>tslint -i</code>生成默认配置文件</p>\n</li>\n</ul>\n"},{"title":"TypeScript新手注意","date":"2016-12-03T20:36:02.000Z","_content":"\n### 语法\n\n- `let x:any` `let x:object`都可以赋值任意类型，不同在于， Object类型的变量只是允许你给它赋任意值 - 但是却不能够在它上面调用任意的方法，即便它真的有这些方法：\n- `never` 表示那些永远不存在的值得类型\n<!--more-->\n- 类型断言`()<string>name)`或`(name as string)`\n- 接口类型检查，只要传入的变量包含接口定义的属性就行，另外和属性顺序无关\n- 可选属性\n\n\t```\n\tinterface Pserson\n\t{\n\tname?:string;\n\tage:number;\n\t}\n\t```\n- 只读属性\n\n\n\t```\n\tinterface Point \n\t{\n    readonly x: number;\n    readonly y: number;\n\t}\n\t```\n- 接口定义，类实现,注意关键字`implements`\n\n\t```\n\tinterface ClockInterface {\n    currentTime: Date;\n    setTime(d: Date);\n\t}\n\n\tclass Clock implements ClockInterface {\n    currentTime: Date;\n    setTime(d: Date) {\n        this.currentTime = d;\n    }\n    constructor(h: number, m: number) { }\n\t}\n\t\n\t```\n- 扩展接口,注意关键字`extends`\n\n\t```\n\tinterface Shape {\n    color: string;\n\t}\n\n\tinterface PenStroke {\n    penWidth: number;\n\t}\n\n\tinterface Square extends Shape, PenStroke {\n    sideLength: number;\n\t}\n\n\tlet square = <Square>{};\n\tsquare.color = \"blue\";\n\tsquare.sideLength = 10;\n\tsquare.penWidth = 5.0;\n\t```\n- 限定符，public,private,protected（类，和子类可访问）,readonly\n- 存取器，get,set,static(属性，方法都可直接添加了不像es6只能方法添加)\n- 抽象类和接口对比，两者都是只定义签名不包含实现。\n   不同在于前者需要abstract关键字修饰，同时抽象***类***可以包含具体方法或抽象方法，抽象***方法***必须子类实现，接口不能有实现\n   \n   ```\n   //接口\n   interface Person\n   {\n     name:string;\n     getName();string;//不能用方法体\n   }\n   ```\n- 泛型，泛型约束\n\n\t```\n\tinterface Lengthwise {\n    length: number;\n\t}\n\n\tfunction loggingIdentity<T extends Lengthwise>(arg: T): T {\n    console.log(arg.length);  // Now we know it has a .length property, so no \tmore error\n    return arg;\n\t}\n\t//类似于c#里的where T :base\n\t\n\t```\n- 联合类型\n\t\n\t```\n\tfunction test(name:string|number)//是两种类型之一，但调用name方法时只能访问两种类型共有的方法，否则得加判断\n\tfunction padLeft(value: string, padding: string | number) {\n    if (typeof padding === \"number\") {\n        return Array(padding + 1).join(\" \") + value;\n    }\n    if (typeof padding === \"string\") {\n        return padding + value;\n    }\n    throw new Error(`Expected string or number, got '${padding}'.`);\n\t}\n\t\n\t```\n\t\n- 模块导入导出\n\t***类和函数声明***可以直接被默认导出，接口不能默认导出，但可以导出\n- 声明合并，接口合并，命名空间合并\n\n### 规范\n- 重载方法不要写多多个每个参数不同这种写法，应该写一个，然后使用可选参数形式\n\n\t```\n\t/* 错误 */\n\tinterface Example {\n    diff(one: string): number;\n    diff(one: string, two: string): number;\n    diff(one: string, two: string, three: boolean): number;\n\t}\n\t/* OK */\n\tinterface Example {\n    diff(one: string, two?: string, three?: boolean): number;\n\t}\n\t```\n- 使用联合类型\n\n\t不要为仅在某个位置上的参数类型不同的情况下定义重载：\n\n\n\t```\n\t/* WRONG */\n\tinterface Moment {\n    utcOffset(): number;\n    utcOffset(b: number): Moment;\n    utcOffset(b: string): Moment;\n\t}\n\t/* OK */\n\tinterface Moment {\n    utcOffset(): number;\n    utcOffset(b: number|string): Moment;\n\t}\n\t```\n\n\t","source":"_posts/TypeScript新手注意.md","raw":"title: TypeScript新手注意\ndate: 2016-12-04 04:36:02\ntags: [TypeScript, 学习, 注意事项]\n---\n\n### 语法\n\n- `let x:any` `let x:object`都可以赋值任意类型，不同在于， Object类型的变量只是允许你给它赋任意值 - 但是却不能够在它上面调用任意的方法，即便它真的有这些方法：\n- `never` 表示那些永远不存在的值得类型\n<!--more-->\n- 类型断言`()<string>name)`或`(name as string)`\n- 接口类型检查，只要传入的变量包含接口定义的属性就行，另外和属性顺序无关\n- 可选属性\n\n\t```\n\tinterface Pserson\n\t{\n\tname?:string;\n\tage:number;\n\t}\n\t```\n- 只读属性\n\n\n\t```\n\tinterface Point \n\t{\n    readonly x: number;\n    readonly y: number;\n\t}\n\t```\n- 接口定义，类实现,注意关键字`implements`\n\n\t```\n\tinterface ClockInterface {\n    currentTime: Date;\n    setTime(d: Date);\n\t}\n\n\tclass Clock implements ClockInterface {\n    currentTime: Date;\n    setTime(d: Date) {\n        this.currentTime = d;\n    }\n    constructor(h: number, m: number) { }\n\t}\n\t\n\t```\n- 扩展接口,注意关键字`extends`\n\n\t```\n\tinterface Shape {\n    color: string;\n\t}\n\n\tinterface PenStroke {\n    penWidth: number;\n\t}\n\n\tinterface Square extends Shape, PenStroke {\n    sideLength: number;\n\t}\n\n\tlet square = <Square>{};\n\tsquare.color = \"blue\";\n\tsquare.sideLength = 10;\n\tsquare.penWidth = 5.0;\n\t```\n- 限定符，public,private,protected（类，和子类可访问）,readonly\n- 存取器，get,set,static(属性，方法都可直接添加了不像es6只能方法添加)\n- 抽象类和接口对比，两者都是只定义签名不包含实现。\n   不同在于前者需要abstract关键字修饰，同时抽象***类***可以包含具体方法或抽象方法，抽象***方法***必须子类实现，接口不能有实现\n   \n   ```\n   //接口\n   interface Person\n   {\n     name:string;\n     getName();string;//不能用方法体\n   }\n   ```\n- 泛型，泛型约束\n\n\t```\n\tinterface Lengthwise {\n    length: number;\n\t}\n\n\tfunction loggingIdentity<T extends Lengthwise>(arg: T): T {\n    console.log(arg.length);  // Now we know it has a .length property, so no \tmore error\n    return arg;\n\t}\n\t//类似于c#里的where T :base\n\t\n\t```\n- 联合类型\n\t\n\t```\n\tfunction test(name:string|number)//是两种类型之一，但调用name方法时只能访问两种类型共有的方法，否则得加判断\n\tfunction padLeft(value: string, padding: string | number) {\n    if (typeof padding === \"number\") {\n        return Array(padding + 1).join(\" \") + value;\n    }\n    if (typeof padding === \"string\") {\n        return padding + value;\n    }\n    throw new Error(`Expected string or number, got '${padding}'.`);\n\t}\n\t\n\t```\n\t\n- 模块导入导出\n\t***类和函数声明***可以直接被默认导出，接口不能默认导出，但可以导出\n- 声明合并，接口合并，命名空间合并\n\n### 规范\n- 重载方法不要写多多个每个参数不同这种写法，应该写一个，然后使用可选参数形式\n\n\t```\n\t/* 错误 */\n\tinterface Example {\n    diff(one: string): number;\n    diff(one: string, two: string): number;\n    diff(one: string, two: string, three: boolean): number;\n\t}\n\t/* OK */\n\tinterface Example {\n    diff(one: string, two?: string, three?: boolean): number;\n\t}\n\t```\n- 使用联合类型\n\n\t不要为仅在某个位置上的参数类型不同的情况下定义重载：\n\n\n\t```\n\t/* WRONG */\n\tinterface Moment {\n    utcOffset(): number;\n    utcOffset(b: number): Moment;\n    utcOffset(b: string): Moment;\n\t}\n\t/* OK */\n\tinterface Moment {\n    utcOffset(): number;\n    utcOffset(b: number|string): Moment;\n\t}\n\t```\n\n\t","slug":"TypeScript新手注意","published":1,"updated":"2016-12-05T15:18:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwc8j8nt0003jh9kapf5zg82","content":"<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><ul>\n<li><code>let x:any</code> <code>let x:object</code>都可以赋值任意类型，不同在于， Object类型的变量只是允许你给它赋任意值 - 但是却不能够在它上面调用任意的方法，即便它真的有这些方法：</li>\n<li><code>never</code> 表示那些永远不存在的值得类型<a id=\"more\"></a></li>\n<li>类型断言<code>()&lt;string&gt;name)</code>或<code>(name as string)</code></li>\n<li>接口类型检查，只要传入的变量包含接口定义的属性就行，另外和属性顺序无关</li>\n<li><p>可选属性</p>\n  <figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Pserson</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">name?:string;</div><div class=\"line\"><span class=\"string\">age:</span>number;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>只读属性</p>\n</li>\n</ul>\n<pre><code><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title\">Point</span> </div><div class=\"line\">&#123;</div><div class=\"line\">   <span class=\"keyword\">readonly</span> x: number;</div><div class=\"line\">   <span class=\"keyword\">readonly</span> y: number;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</code></pre><ul>\n<li><p>接口定义，类实现,注意关键字<code>implements</code></p>\n  <figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">interface</span> ClockInterface <span class=\"comment\">&#123;</span></div><div class=\"line\">   currentTime: Date;</div><div class=\"line\">   setTime(d: Date);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> Clock <span class=\"keyword\">implements</span> ClockInterface <span class=\"comment\">&#123;</span></div><div class=\"line\">   currentTime: Date;</div><div class=\"line\">   setTime(d: Date) &#123;</div><div class=\"line\">       this.currentTime = d;</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">constructor</span><span class=\"params\">(h: number, m: number)</span> <span class=\"comment\">&#123; &#125;</span></span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>扩展接口,注意关键字<code>extends</code></p>\n  <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">interface</span> Shape &#123;</div><div class=\"line\">   color: <span class=\"built_in\">string</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">interface</span> PenStroke &#123;</div><div class=\"line\">   penWidth: <span class=\"built_in\">number</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">interface</span> Square <span class=\"keyword\">extends</span> Shape, PenStroke &#123;</div><div class=\"line\">   sideLength: <span class=\"built_in\">number</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> square = &lt;Square&gt;&#123;&#125;;</div><div class=\"line\">square.color = <span class=\"string\">\"blue\"</span>;</div><div class=\"line\">square.sideLength = <span class=\"number\">10</span>;</div><div class=\"line\">square.penWidth = <span class=\"number\">5.0</span>;</div></pre></td></tr></table></figure>\n</li>\n<li><p>限定符，public,private,protected（类，和子类可访问）,readonly</p>\n</li>\n<li>存取器，get,set,static(属性，方法都可直接添加了不像es6只能方法添加)</li>\n<li><p>抽象类和接口对比，两者都是只定义签名不包含实现。<br> 不同在于前者需要abstract关键字修饰，同时抽象<strong><em>类</em></strong>可以包含具体方法或抽象方法，抽象<strong><em>方法</em></strong>必须子类实现，接口不能有实现</p>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//接口</span></div><div class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title\">Person</span></div><div class=\"line\">&#123;</div><div class=\"line\">  name:<span class=\"keyword\">string</span>;</div><div class=\"line\">  getName();<span class=\"keyword\">string</span>;<span class=\"comment\">//不能用方法体</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>泛型，泛型约束</p>\n  <figure class=\"highlight scilab\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">interface Lengthwise &#123;</div><div class=\"line\">   <span class=\"built_in\">length</span>: number;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loggingIdentity</span>&lt;<span class=\"title\">T</span> <span class=\"title\">extends</span> <span class=\"title\">Lengthwise</span>&gt;<span class=\"params\">(arg: T)</span>: <span class=\"title\">T</span> &#123;</span></div><div class=\"line\">   console.<span class=\"built_in\">log</span>(arg.<span class=\"built_in\">length</span>);  <span class=\"comment\">// Now we know it has a .length property, so no \tmore error</span></div><div class=\"line\">   <span class=\"keyword\">return</span> arg;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//类似于c#里的where T :base</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>联合类型</p>\n  <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">function <span class=\"title\">test</span>(<span class=\"params\">name:<span class=\"keyword\">string</span>|number</span>)<span class=\"comment\">//是两种类型之一，但调用name方法时只能访问两种类型共有的方法，否则得加判断</span></span></div><div class=\"line\">function <span class=\"title\">padLeft</span>(<span class=\"params\"><span class=\"keyword\">value</span>: <span class=\"keyword\">string</span>, padding: <span class=\"keyword\">string</span> | number</span>) &#123;</div><div class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> padding === <span class=\"string\">\"number\"</span>) &#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> Array(padding + <span class=\"number\">1</span>).<span class=\"keyword\">join</span>(<span class=\"string\">\" \"</span>) + <span class=\"keyword\">value</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> padding === <span class=\"string\">\"string\"</span>) &#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> padding + <span class=\"keyword\">value</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Error(`Expected <span class=\"keyword\">string</span> or number, got <span class=\"string\">'$&#123;padding&#125;'</span>.`);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>模块导入导出<br>  <strong><em>类和函数声明</em></strong>可以直接被默认导出，接口不能默认导出，但可以导出</li>\n<li>声明合并，接口合并，命名空间合并</li>\n</ul>\n<h3 id=\"规范\"><a href=\"#规范\" class=\"headerlink\" title=\"规范\"></a>规范</h3><ul>\n<li><p>重载方法不要写多多个每个参数不同这种写法，应该写一个，然后使用可选参数形式</p>\n  <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* 错误 */</span></div><div class=\"line\"><span class=\"keyword\">interface</span> Example &#123;</div><div class=\"line\">   diff(one: <span class=\"built_in\">string</span>): <span class=\"built_in\">number</span>;</div><div class=\"line\">   diff(one: <span class=\"built_in\">string</span>, two: <span class=\"built_in\">string</span>): <span class=\"built_in\">number</span>;</div><div class=\"line\">   diff(one: <span class=\"built_in\">string</span>, two: <span class=\"built_in\">string</span>, three: <span class=\"built_in\">boolean</span>): <span class=\"built_in\">number</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/* OK */</span></div><div class=\"line\"><span class=\"keyword\">interface</span> Example &#123;</div><div class=\"line\">   diff(one: <span class=\"built_in\">string</span>, two?: <span class=\"built_in\">string</span>, three?: <span class=\"built_in\">boolean</span>): <span class=\"built_in\">number</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>使用联合类型</p>\n<p>  不要为仅在某个位置上的参数类型不同的情况下定义重载：</p>\n</li>\n</ul>\n<pre><code><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* WRONG */</span></div><div class=\"line\"><span class=\"keyword\">interface</span> Moment &#123;</div><div class=\"line\">   utcOffset(): <span class=\"built_in\">number</span>;</div><div class=\"line\">   utcOffset(b: <span class=\"built_in\">number</span>): Moment;</div><div class=\"line\">   utcOffset(b: <span class=\"built_in\">string</span>): Moment;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/* OK */</span></div><div class=\"line\"><span class=\"keyword\">interface</span> Moment &#123;</div><div class=\"line\">   utcOffset(): <span class=\"built_in\">number</span>;</div><div class=\"line\">   utcOffset(b: <span class=\"built_in\">number</span>|<span class=\"built_in\">string</span>): Moment;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</code></pre>","excerpt":"<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><ul>\n<li><code>let x:any</code> <code>let x:object</code>都可以赋值任意类型，不同在于， Object类型的变量只是允许你给它赋任意值 - 但是却不能够在它上面调用任意的方法，即便它真的有这些方法：</li>\n<li><code>never</code> 表示那些永远不存在的值得类型","more":"</li>\n<li>类型断言<code>()&lt;string&gt;name)</code>或<code>(name as string)</code></li>\n<li>接口类型检查，只要传入的变量包含接口定义的属性就行，另外和属性顺序无关</li>\n<li><p>可选属性</p>\n  <figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Pserson</span></div><div class=\"line\">&#123;</span></div><div class=\"line\">name?:string;</div><div class=\"line\"><span class=\"string\">age:</span>number;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>只读属性</p>\n</li>\n</ul>\n<pre><code><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title\">Point</span> </div><div class=\"line\">&#123;</div><div class=\"line\">   <span class=\"keyword\">readonly</span> x: number;</div><div class=\"line\">   <span class=\"keyword\">readonly</span> y: number;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</code></pre><ul>\n<li><p>接口定义，类实现,注意关键字<code>implements</code></p>\n  <figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">interface</span> ClockInterface <span class=\"comment\">&#123;</div><div class=\"line\">   currentTime: Date;</div><div class=\"line\">   setTime(d: Date);</div><div class=\"line\">&#125;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> Clock <span class=\"keyword\">implements</span> ClockInterface <span class=\"comment\">&#123;</div><div class=\"line\">   currentTime: Date;</div><div class=\"line\">   setTime(d: Date) &#123;</div><div class=\"line\">       this.currentTime = d;</div><div class=\"line\">   &#125;</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">constructor</span><span class=\"params\">(h: number, m: number)</span> <span class=\"comment\">&#123; &#125;</span></div><div class=\"line\">&#125;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>扩展接口,注意关键字<code>extends</code></p>\n  <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">interface</span> Shape &#123;</div><div class=\"line\">   color: <span class=\"built_in\">string</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">interface</span> PenStroke &#123;</div><div class=\"line\">   penWidth: <span class=\"built_in\">number</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">interface</span> Square <span class=\"keyword\">extends</span> Shape, PenStroke &#123;</div><div class=\"line\">   sideLength: <span class=\"built_in\">number</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> square = &lt;Square&gt;&#123;&#125;;</div><div class=\"line\">square.color = <span class=\"string\">\"blue\"</span>;</div><div class=\"line\">square.sideLength = <span class=\"number\">10</span>;</div><div class=\"line\">square.penWidth = <span class=\"number\">5.0</span>;</div></pre></td></tr></table></figure>\n</li>\n<li><p>限定符，public,private,protected（类，和子类可访问）,readonly</p>\n</li>\n<li>存取器，get,set,static(属性，方法都可直接添加了不像es6只能方法添加)</li>\n<li><p>抽象类和接口对比，两者都是只定义签名不包含实现。<br> 不同在于前者需要abstract关键字修饰，同时抽象<strong><em>类</em></strong>可以包含具体方法或抽象方法，抽象<strong><em>方法</em></strong>必须子类实现，接口不能有实现</p>\n <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//接口</span></div><div class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title\">Person</span></div><div class=\"line\">&#123;</div><div class=\"line\">  name:<span class=\"keyword\">string</span>;</div><div class=\"line\">  getName();<span class=\"keyword\">string</span>;<span class=\"comment\">//不能用方法体</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>泛型，泛型约束</p>\n  <figure class=\"highlight scilab\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">interface Lengthwise &#123;</div><div class=\"line\">   <span class=\"built_in\">length</span>: number;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loggingIdentity</span>&lt;<span class=\"title\">T</span> <span class=\"title\">extends</span> <span class=\"title\">Lengthwise</span>&gt;<span class=\"params\">(arg: T)</span>: <span class=\"title\">T</span> &#123;</span></div><div class=\"line\">   console.<span class=\"built_in\">log</span>(arg.<span class=\"built_in\">length</span>);  <span class=\"comment\">// Now we know it has a .length property, so no \tmore error</span></div><div class=\"line\">   <span class=\"keyword\">return</span> arg;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//类似于c#里的where T :base</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>联合类型</p>\n  <figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">function <span class=\"title\">test</span>(<span class=\"params\">name:<span class=\"keyword\">string</span>|number</span>)<span class=\"comment\">//是两种类型之一，但调用name方法时只能访问两种类型共有的方法，否则得加判断</span></div><div class=\"line\">function <span class=\"title\">padLeft</span>(<span class=\"params\"><span class=\"keyword\">value</span>: <span class=\"keyword\">string</span>, padding: <span class=\"keyword\">string</span> | number</span>) </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> padding === <span class=\"string\">\"number\"</span>) &#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> Array(padding + <span class=\"number\">1</span>).<span class=\"keyword\">join</span>(<span class=\"string\">\" \"</span>) + <span class=\"keyword\">value</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> padding === <span class=\"string\">\"string\"</span>) &#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> padding + <span class=\"keyword\">value</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Error(`Expected <span class=\"keyword\">string</span> or number, got <span class=\"string\">'$&#123;padding&#125;'</span>.`);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>模块导入导出<br>  <strong><em>类和函数声明</em></strong>可以直接被默认导出，接口不能默认导出，但可以导出</li>\n<li>声明合并，接口合并，命名空间合并</li>\n</ul>\n<h3 id=\"规范\"><a href=\"#规范\" class=\"headerlink\" title=\"规范\"></a>规范</h3><ul>\n<li><p>重载方法不要写多多个每个参数不同这种写法，应该写一个，然后使用可选参数形式</p>\n  <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* 错误 */</span></div><div class=\"line\"><span class=\"keyword\">interface</span> Example &#123;</div><div class=\"line\">   diff(one: <span class=\"built_in\">string</span>): <span class=\"built_in\">number</span>;</div><div class=\"line\">   diff(one: <span class=\"built_in\">string</span>, two: <span class=\"built_in\">string</span>): <span class=\"built_in\">number</span>;</div><div class=\"line\">   diff(one: <span class=\"built_in\">string</span>, two: <span class=\"built_in\">string</span>, three: <span class=\"built_in\">boolean</span>): <span class=\"built_in\">number</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/* OK */</span></div><div class=\"line\"><span class=\"keyword\">interface</span> Example &#123;</div><div class=\"line\">   diff(one: <span class=\"built_in\">string</span>, two?: <span class=\"built_in\">string</span>, three?: <span class=\"built_in\">boolean</span>): <span class=\"built_in\">number</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>使用联合类型</p>\n<p>  不要为仅在某个位置上的参数类型不同的情况下定义重载：</p>\n</li>\n</ul>\n<pre><code><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* WRONG */</span></div><div class=\"line\"><span class=\"keyword\">interface</span> Moment &#123;</div><div class=\"line\">   utcOffset(): <span class=\"built_in\">number</span>;</div><div class=\"line\">   utcOffset(b: <span class=\"built_in\">number</span>): Moment;</div><div class=\"line\">   utcOffset(b: <span class=\"built_in\">string</span>): Moment;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/* OK */</span></div><div class=\"line\"><span class=\"keyword\">interface</span> Moment &#123;</div><div class=\"line\">   utcOffset(): <span class=\"built_in\">number</span>;</div><div class=\"line\">   utcOffset(b: <span class=\"built_in\">number</span>|<span class=\"built_in\">string</span>): Moment;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</code></pre>"},{"title":"vue易错笔记","date":"2016-11-17T16:23:01.000Z","_content":"\n### 几点要点\n\n- 没有控制器的概念，所有的方法和逻辑应该写在方法中或者生命周期方法中\n\n- {{x}}插值（mustache）不能在属性中使用，只能在模板中使用，属性中应该用`v-bind:title=\"xxx\"`这样，不能`title={{xxx}}`\n\n- 绑定都只能包含单个表达式，所以下面的例子都不会生效。\n\n\n<!--more-->\n\n\n```\n\t<!-- 这是语句，不是表达式 -->\n\t{{ var a = 1 }}\n\t<!-- 流控制也不会生效，请使用三元表达式 -->\n\t{{ if (ok) { return message } }}\n\n```\n\n- v-bind:title 缩写:title,v-on:click= 缩写@click=\n\n- 计算属性computed和watch,耗时长用watch,另外计算属性是依赖基础属性的如果基础属性没变化是不会调用的，如下\n\n```\n\tcomputed: {\n\t  now: function () {\n\t    return Date.now()\n\t  }\n\t} //此时now就不会更新，显然这时候使用method更好\n    \n```\n\n- 组件中ｄａｔａ必须是方法而不能是对象，这样当有多个组件时，不会出现都引用同一个的问题\n\n- 组件实例化要放在根实例化之前\n\n- v-model可以添加修饰值．lazy,number,trim\n\n- props,父组件给子ｐrops传值时，使用v-bind `<my-cop ：my-prop='1'></mycop>` 而不是直接`<my-cop my-prop='1'></mycop>` ，后者传递的只是一个字符１，不是数字\n\n- 父组件事件监听和react差不多，需要注意的是如果要监听原生事件添加.native修饰符，如`<my-component v-on:click.native=\"doTheThing\"></my-component>`\n\n- slot内容分发，类似angular 的transclusion,有匿名和具名两种，组合组件时常用\n\n- 多个组件可以使用同一个挂载点，然后动态地在它们之间切换。使用 *** 保留的< component>元素 ***，动态地绑定到它的is特性：\n\n```\n    var vm = new Vue({\n    el: '#example',\n    data: {\n    \tcurrentView: 'home'\n        },\n        components: {\n    \thome: { /* ... */ },\n    \tposts: { /* ... */ },\n    \tarchive: { /* ... */ }\n        }\n    })；\n\n```\n\n\n```\n\t<component v-bind:is=\"currentView\">\n\t  <!-- 组件在 vm.currentview 变化时改变！ -->\n\t</component> //通过改变currentView的值来动态改变组件内容\n\n```\n\n- ref引用，类似react　需要注意的是ref 被用来给元素或子组件注册引用信息。引用信息会根据父组件的 $refs 对象进行注册。如果在普通的DOM元素上使用，引用信息就是元素; 如果用在子组件上，引用信息就是组件实例:\n\n\n```\n\t<!-- vm.$refs.p will the DOM node -->\n\t<p ref=\"p\">hello</p>\n\t<!-- vm.$refs.child will be the child comp instance -->\n\t<child-comp ref=\"child\"></child-comp>\n\n```\n\n- v-once 渲染结果缓存\n\n```\n\tVue.component('terms-of-service', {\n\t\t  template: '\\\n\t\t    <div v-once>\\\n\t\t      <h1>Terms of Service</h1>\\\n\t\t      ... a lot of static content ...\\\n\t\t    </div>\\\n\t\t  '\n\t\t})\n```\n\n\n\n\n\t","source":"_posts/vue易错笔记.md","raw":"title: vue易错笔记\ndate: 2016-11-18 00:23:01\ntags: [前端, 学习, html, js, css, vue]\n---\n\n### 几点要点\n\n- 没有控制器的概念，所有的方法和逻辑应该写在方法中或者生命周期方法中\n\n- {{x}}插值（mustache）不能在属性中使用，只能在模板中使用，属性中应该用`v-bind:title=\"xxx\"`这样，不能`title={{xxx}}`\n\n- 绑定都只能包含单个表达式，所以下面的例子都不会生效。\n\n\n<!--more-->\n\n\n```\n\t<!-- 这是语句，不是表达式 -->\n\t{{ var a = 1 }}\n\t<!-- 流控制也不会生效，请使用三元表达式 -->\n\t{{ if (ok) { return message } }}\n\n```\n\n- v-bind:title 缩写:title,v-on:click= 缩写@click=\n\n- 计算属性computed和watch,耗时长用watch,另外计算属性是依赖基础属性的如果基础属性没变化是不会调用的，如下\n\n```\n\tcomputed: {\n\t  now: function () {\n\t    return Date.now()\n\t  }\n\t} //此时now就不会更新，显然这时候使用method更好\n    \n```\n\n- 组件中ｄａｔａ必须是方法而不能是对象，这样当有多个组件时，不会出现都引用同一个的问题\n\n- 组件实例化要放在根实例化之前\n\n- v-model可以添加修饰值．lazy,number,trim\n\n- props,父组件给子ｐrops传值时，使用v-bind `<my-cop ：my-prop='1'></mycop>` 而不是直接`<my-cop my-prop='1'></mycop>` ，后者传递的只是一个字符１，不是数字\n\n- 父组件事件监听和react差不多，需要注意的是如果要监听原生事件添加.native修饰符，如`<my-component v-on:click.native=\"doTheThing\"></my-component>`\n\n- slot内容分发，类似angular 的transclusion,有匿名和具名两种，组合组件时常用\n\n- 多个组件可以使用同一个挂载点，然后动态地在它们之间切换。使用 *** 保留的< component>元素 ***，动态地绑定到它的is特性：\n\n```\n    var vm = new Vue({\n    el: '#example',\n    data: {\n    \tcurrentView: 'home'\n        },\n        components: {\n    \thome: { /* ... */ },\n    \tposts: { /* ... */ },\n    \tarchive: { /* ... */ }\n        }\n    })；\n\n```\n\n\n```\n\t<component v-bind:is=\"currentView\">\n\t  <!-- 组件在 vm.currentview 变化时改变！ -->\n\t</component> //通过改变currentView的值来动态改变组件内容\n\n```\n\n- ref引用，类似react　需要注意的是ref 被用来给元素或子组件注册引用信息。引用信息会根据父组件的 $refs 对象进行注册。如果在普通的DOM元素上使用，引用信息就是元素; 如果用在子组件上，引用信息就是组件实例:\n\n\n```\n\t<!-- vm.$refs.p will the DOM node -->\n\t<p ref=\"p\">hello</p>\n\t<!-- vm.$refs.child will be the child comp instance -->\n\t<child-comp ref=\"child\"></child-comp>\n\n```\n\n- v-once 渲染结果缓存\n\n```\n\tVue.component('terms-of-service', {\n\t\t  template: '\\\n\t\t    <div v-once>\\\n\t\t      <h1>Terms of Service</h1>\\\n\t\t      ... a lot of static content ...\\\n\t\t    </div>\\\n\t\t  '\n\t\t})\n```\n\n\n\n\n\t","slug":"vue易错笔记","published":1,"updated":"2016-12-06T02:33:46.436Z","_id":"ciwc8j8o5000ljh9kkxrl2oju","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"几点要点\"><a href=\"#几点要点\" class=\"headerlink\" title=\"几点要点\"></a>几点要点</h3><ul>\n<li><p>没有控制器的概念，所有的方法和逻辑应该写在方法中或者生命周期方法中</p>\n</li>\n<li><p>插值（mustache）不能在属性中使用，只能在模板中使用，属性中应该用<code>v-bind:title=&quot;xxx&quot;</code>这样，不能<code>title=</code></p>\n</li>\n<li><p>绑定都只能包含单个表达式，所以下面的例子都不会生效。</p>\n</li>\n</ul>\n<a id=\"more\"></a>\n<figure class=\"highlight dust\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- 这是语句，不是表达式 --&gt;</span></span></div><div class=\"line\"><span class=\"template-variable\">&#123;&#123; var a = 1 &#125;</span><span class=\"xml\">&#125;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 流控制也不会生效，请使用三元表达式 --&gt;</span></div><div class=\"line\"><span class=\"template-variable\">&#123;&#123; <span class=\"keyword\">if</span> (ok) &#123; return message &#125;</span><span class=\"xml\"> &#125;&#125;</span></div></pre></td></tr></table></figure>\n<ul>\n<li><p>v-bind:title 缩写:title,v-on:click= 缩写@click=</p>\n</li>\n<li><p>计算属性computed和watch,耗时长用watch,另外计算属性是依赖基础属性的如果基础属性没变化是不会调用的，如下</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">computed: &#123;</div><div class=\"line\">  <span class=\"attr\">now</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Date</span>.now()</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125; <span class=\"comment\">//此时now就不会更新，显然这时候使用method更好</span></div></pre></td></tr></table></figure>\n<ul>\n<li><p>组件中ｄａｔａ必须是方法而不能是对象，这样当有多个组件时，不会出现都引用同一个的问题</p>\n</li>\n<li><p>组件实例化要放在根实例化之前</p>\n</li>\n<li><p>v-model可以添加修饰值．lazy,number,trim</p>\n</li>\n<li><p>props,父组件给子ｐrops传值时，使用v-bind <code>&lt;my-cop ：my-prop=&#39;1&#39;&gt;&lt;/mycop&gt;</code> 而不是直接<code>&lt;my-cop my-prop=&#39;1&#39;&gt;&lt;/mycop&gt;</code> ，后者传递的只是一个字符１，不是数字</p>\n</li>\n<li><p>父组件事件监听和react差不多，需要注意的是如果要监听原生事件添加.native修饰符，如<code>&lt;my-component v-on:click.native=&quot;doTheThing&quot;&gt;&lt;/my-component&gt;</code></p>\n</li>\n<li><p>slot内容分发，类似angular 的transclusion,有匿名和具名两种，组合组件时常用</p>\n</li>\n<li><p>多个组件可以使用同一个挂载点，然后动态地在它们之间切换。使用 <strong><em> 保留的&lt; component&gt;元素 </em></strong>，动态地绑定到它的is特性：</p>\n</li>\n</ul>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var <span class=\"keyword\">vm</span> = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\"><span class=\"keyword\">e</span><span class=\"variable\">l:</span> <span class=\"string\">'#example'</span>,</div><div class=\"line\">dat<span class=\"variable\">a:</span> &#123;</div><div class=\"line\">\tcurrentVie<span class=\"variable\">w:</span> <span class=\"string\">'home'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    component<span class=\"variable\">s:</span> &#123;</div><div class=\"line\">\thome: &#123; /* ... */ &#125;,</div><div class=\"line\">\tpost<span class=\"variable\">s:</span> &#123; /* ... */ &#125;,</div><div class=\"line\">\tarchive: &#123; /* ... */ &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)；</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;component v-bind:is=<span class=\"string\">\"currentView\"</span>&gt;</div><div class=\"line\">  <span class=\"xml\"><span class=\"comment\">&lt;!-- 组件在 vm.currentview 变化时改变！ --&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span> <span class=\"comment\">//通过改变currentView的值来动态改变组件内容</span></div></pre></td></tr></table></figure>\n<ul>\n<li>ref引用，类似react　需要注意的是ref 被用来给元素或子组件注册引用信息。引用信息会根据父组件的 $refs 对象进行注册。如果在普通的DOM元素上使用，引用信息就是元素; 如果用在子组件上，引用信息就是组件实例:</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- vm.$refs.p will the DOM node --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"p\"</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- vm.$refs.child will be the child comp instance --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">child-comp</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"child\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child-comp</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>v-once 渲染结果缓存</li>\n</ul>\n<figure class=\"highlight nimrod\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"type\">Vue</span>.component('terms-<span class=\"keyword\">of</span>-service', &#123;</div><div class=\"line\">\t  <span class=\"keyword\">template</span>: '\\</div><div class=\"line\">\t    &lt;<span class=\"keyword\">div</span> v-once&gt;\\</div><div class=\"line\">\t      &lt;h1&gt;<span class=\"type\">Terms</span> <span class=\"keyword\">of</span> <span class=\"type\">Service</span>&lt;/h1&gt;\\</div><div class=\"line\">\t      ... a lot <span class=\"keyword\">of</span> <span class=\"keyword\">static</span> content ...\\</div><div class=\"line\">\t    &lt;/<span class=\"keyword\">div</span>&gt;\\</div><div class=\"line\">\t  '</div><div class=\"line\">\t&#125;)</div></pre></td></tr></table></figure>\n","excerpt":"<h3 id=\"几点要点\"><a href=\"#几点要点\" class=\"headerlink\" title=\"几点要点\"></a>几点要点</h3><ul>\n<li><p>没有控制器的概念，所有的方法和逻辑应该写在方法中或者生命周期方法中</p>\n</li>\n<li><p>插值（mustache）不能在属性中使用，只能在模板中使用，属性中应该用<code>v-bind:title=&quot;xxx&quot;</code>这样，不能<code>title=</code></p>\n</li>\n<li><p>绑定都只能包含单个表达式，所以下面的例子都不会生效。</p>\n</li>\n</ul>","more":"<figure class=\"highlight dust\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- 这是语句，不是表达式 --&gt;</span></div><div class=\"line\"></span><span class=\"template-variable\">&#123;&#123; var a = 1 &#125;</span><span class=\"xml\">&#125;</div><div class=\"line\"><span class=\"comment\">&lt;!-- 流控制也不会生效，请使用三元表达式 --&gt;</span></div><div class=\"line\"></span><span class=\"template-variable\">&#123;&#123; <span class=\"keyword\">if</span> (ok) &#123; return message &#125;</span><span class=\"xml\"> &#125;&#125;</span></div></pre></td></tr></table></figure>\n<ul>\n<li><p>v-bind:title 缩写:title,v-on:click= 缩写@click=</p>\n</li>\n<li><p>计算属性computed和watch,耗时长用watch,另外计算属性是依赖基础属性的如果基础属性没变化是不会调用的，如下</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">computed: &#123;</div><div class=\"line\">  <span class=\"attr\">now</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Date</span>.now()</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125; <span class=\"comment\">//此时now就不会更新，显然这时候使用method更好</span></div></pre></td></tr></table></figure>\n<ul>\n<li><p>组件中ｄａｔａ必须是方法而不能是对象，这样当有多个组件时，不会出现都引用同一个的问题</p>\n</li>\n<li><p>组件实例化要放在根实例化之前</p>\n</li>\n<li><p>v-model可以添加修饰值．lazy,number,trim</p>\n</li>\n<li><p>props,父组件给子ｐrops传值时，使用v-bind <code>&lt;my-cop ：my-prop=&#39;1&#39;&gt;&lt;/mycop&gt;</code> 而不是直接<code>&lt;my-cop my-prop=&#39;1&#39;&gt;&lt;/mycop&gt;</code> ，后者传递的只是一个字符１，不是数字</p>\n</li>\n<li><p>父组件事件监听和react差不多，需要注意的是如果要监听原生事件添加.native修饰符，如<code>&lt;my-component v-on:click.native=&quot;doTheThing&quot;&gt;&lt;/my-component&gt;</code></p>\n</li>\n<li><p>slot内容分发，类似angular 的transclusion,有匿名和具名两种，组合组件时常用</p>\n</li>\n<li><p>多个组件可以使用同一个挂载点，然后动态地在它们之间切换。使用 <strong><em> 保留的&lt; component&gt;元素 </em></strong>，动态地绑定到它的is特性：</p>\n</li>\n</ul>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var <span class=\"keyword\">vm</span> = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\"><span class=\"keyword\">e</span><span class=\"variable\">l:</span> <span class=\"string\">'#example'</span>,</div><div class=\"line\">dat<span class=\"variable\">a:</span> &#123;</div><div class=\"line\">\tcurrentVie<span class=\"variable\">w:</span> <span class=\"string\">'home'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    component<span class=\"variable\">s:</span> &#123;</div><div class=\"line\">\thome: &#123; /* ... */ &#125;,</div><div class=\"line\">\tpost<span class=\"variable\">s:</span> &#123; /* ... */ &#125;,</div><div class=\"line\">\tarchive: &#123; /* ... */ &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)；</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;component v-bind:is=<span class=\"string\">\"currentView\"</span>&gt;</div><div class=\"line\">  <span class=\"xml\"><span class=\"comment\">&lt;!-- 组件在 vm.currentview 变化时改变！ --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span> <span class=\"comment\">//通过改变currentView的值来动态改变组件内容</span></div></pre></td></tr></table></figure>\n<ul>\n<li>ref引用，类似react　需要注意的是ref 被用来给元素或子组件注册引用信息。引用信息会根据父组件的 $refs 对象进行注册。如果在普通的DOM元素上使用，引用信息就是元素; 如果用在子组件上，引用信息就是组件实例:</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- vm.$refs.p will the DOM node --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"p\"</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- vm.$refs.child will be the child comp instance --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">child-comp</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"child\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child-comp</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>v-once 渲染结果缓存</li>\n</ul>\n<figure class=\"highlight nimrod\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"type\">Vue</span>.component('terms-<span class=\"keyword\">of</span>-service', &#123;</div><div class=\"line\">\t  <span class=\"keyword\">template</span>: '\\</div><div class=\"line\">\t    &lt;<span class=\"keyword\">div</span> v-once&gt;\\</div><div class=\"line\">\t      &lt;h1&gt;<span class=\"type\">Terms</span> <span class=\"keyword\">of</span> <span class=\"type\">Service</span>&lt;/h1&gt;\\</div><div class=\"line\">\t      ... a lot <span class=\"keyword\">of</span> <span class=\"keyword\">static</span> content ...\\</div><div class=\"line\">\t    &lt;/<span class=\"keyword\">div</span>&gt;\\</div><div class=\"line\">\t  '</div><div class=\"line\">\t&#125;)</div></pre></td></tr></table></figure>"},{"title":"前端拾遗","date":"2016-07-22T08:14:52.000Z","_content":"\n > 这将是是一篇零散的学习笔记，用来记录自己重新复习、学习前端种种的知识点。希望我能真正的静下心来充实的度过这段时间。\n\n## 整个笔记会分为以下三大部分\n* [技术理论部分](#technology)\n\n* [项目实践部分](#project)\n\n* [面试准备部分](#interview) \n\n<!--more-->\n\n## <span id=\"technology\">技术理论</span>\n\n * [html](#html)\n * [css](#css)\n * [less](#less)\n * [js](#js)\n * [es6](#es6)\n * [jquery](#jquery)\n * [git](#git)\n * [angular](#angular)\n * [node](#node)\n * [mongo+sql](#mongo)\n * [UnitTest](#UnitTest)\n * [gulp+webpack+babel](#webpack)\n * [浏览器commonjs ]\n * [react](#react)\n\n### <span id=\"css\">css</span>\n\n * box-shadow可以设置多个，这样可以显示层叠效果\n ```\n  box-shadow: 0 1px 1px rgba(0, 0, 0, 0.3),\n  0 6px 0 -3px rgba(255, 255, 255, 0.8),\n  0 7px 1px -3px rgba(0, 0, 0, 0.3),\n  0 43px 0 -6px rgba(255, 255, 255, 0.8),\n  0 44px 2px -6px rgba(0, 0, 0, 0.2);\n ```\n \n * 带有label的checkbox,如果label有for属性，当点击的有for属性的label标签时，对应的Checkbox复选框会被选中，这样就能利用label来修改checkbox样式，首先要隐藏原来的checkbox[看这个](clownvary.github.io/demo/checkbox_demo/checkbox_css.html)\n 同理其他的控件添加label 只要有for（for对应的是id），那么当点击这label时对应的控件便会获得焦点\n * background-size \n  cover 图小于父级块时放大图 填满块\n  contain 图大于父级块时，适当缩小，填满块\n * background-clip 背景色填充区域， content-box padding-box border-box\n\n * display:block;如果这样写的话，比如一个div内有多个span,本来是想都在一行显示的，但加了这的span就成了一个块，单独占满一行，其他的只能挤下去,这个时候可以设置inline-block就好了\n *vertical-align: middle;,垂直居中，常用\n * css遮罩层\n 内嵌一个绝对定位的div,left top 均设置为0，即可覆盖\n ```\n <div class=\"preview\">\n            <img src=\"https://40.media.tumblr.com/a73e79ce9844761d7cdc93d202b5cea1/tumblr_nwh4iomduD1ud7rr3o1_1280.jpg\" alt=\"proj1\" title=\"proj\">\n            <div class=\"modal-layout\">\n              <div class=\"content\">\n                <i class=\"fa fa-fire fa-fw fa-3x\"></i>\n              </div>\n\n            </div>\n          </div>\n\n          .modal-layout{\n      width: 100%;\n      height: 195px;\n      background-color: black;\n      opacity: 0.6;\n      z-index: 2;\n      position: absolute;\n      left: 0;\n      top: 0;\n    }\n\n ```\n\n### <span id=\"less\">less</span>\n\n* 变量 mixin 混合 命名空间（注意只能是属性集不能访问变量，如`#base-style > .button `不能有`#base-style >@color`）\n\n* @import 导入，可以导入less,css，别和important弄混了\n\n* 字符串插值，变量可以用像 @{name} 这样的结构，以类似 ruby 和 php 的方式嵌入到字符\n```\n@base-url: \"http://assets.fnord.com\";//一般用在使用静态外部资源时候的配置，就不用js了\nbackground-image: url(\"@{base-url}/images/bg.png\");\n```\n\n### <span id=\"js\">js</span>\n\n* 函数返回函数的调用\n  ```\n    function test(name)\n    {\n      console.log(name);\n      return function(age)\n      {\n        console.log(age);\n      }\n    }\n\n    //调用如下\n    test(‘jary’)(34);//因为第一个方法返回还是个方法，所以直接跟参数\n  ```\n\n### <span id=\"es6\">es6</span>\n\n* [对照这个看](https://gist.github.com/clownvary/f5e5b77f4b376640f70d02fb4fba7b99)\n\n* let 应用for 循环 局部变量\n\n* 数组、对象、字符解构，应用函数参数赋默认值\n```\nfunction ajax(url,{\n  aync=true,\n  cache=true\n})\n```\n\n* string 几个方法 include startWith endWith padStart padEnd\n 1.模板字符串，`my name is ${name}` \n\n* Array 方法，for..of keys()、values()、entries(),from,of(将一组数转化为数组)find,findIndex,filter,fill(填充)\n\n* 函数，拥有length属性，***表示剩余的没有指定默认值的参数个数***，注意不包括rest参数\n  1.rest参数`...iterms`,是一个后续的参数集合数组，注意rest只能是最后一个参数\n  2.扩展运算符`...iterms`好比rest的逆运算\n  3.箭头函数，注意如果直接返回一个对象应该用括号包住\n\n* 对象，\n  1.Object.is(),用来比较两个对象是否严格相等，与=== 意思相近，如`Object.is(+0,-0)//false`\n\n* symbol,为了对象属性的唯一性，新加的js第七种类型，常用来作为标示\n  1.作为对象属相时必须用[]，括住，如\n   ```\n   let s_x=Symbol(\"book\");\n   let me={[s_x]:\"sword\",name:\"tom\"};\n   console.log(me[s_x]);//me[s_x],和me.name访问形式不同\n   ```\n\n* set,不允许有重复的数组，weakset,数组内只能是对象\n  1.set 的for of xxx.keys() 的key和value完全一样\n\n* map,拥有键值对的集合，相比传统对象，它的键可以是对象，而不一定是字符串\n\n* 尽量使用for of ,别用for in,for in 只能读取键名，不能读取值\n\n* generator 函数  用来暂停函数，可用在异步编程的同步操作中，通过next()来调用\n  1.\n  ```\n     function *generator()\n    {\n      yield \"hello\";\n      yield \"world\";\n      return \"ending\";\n    }\n\n  ```\n\n* promise\n  promise的应用主要是可以把任意方法包装后 进行回调\n \n ```\n   class me\n  {\n   testPromise(todo)\n   {\n \n    let p;\n    if(todo==='xxx')\n    {\n      p=Promise.resolve(`成功${todo}`);\n    }\n    else\n    { \n    p=Promise.reject(`失败${todo}`);\n    }\n    return p;\n\n  }\n}\nlet demo=new me();\ndemo.testPromise('xsxx').then(x=>console.log(x),x=>console.log(x))\n  ```\n  ```\n  var promise = new Promise(function(resolve, reject) {\n  // ... some code\n\n  if (/* 异步操作成功 */){\n    resolve(value);//带一个参数是可以把这个参数传给then回调方法\n  } else {\n    reject(error);\n  }\n});\npromise.then(function(value){//then有两个参数，成功的和失败的，失败的参数是可选的，一般建议都不写，而是直接写catch捕获错误\n  ....\n},function(error){\n  ...\n}).catch()\n\n  ```\n  1.一般来说，不要在then方法里面定义Reject状态的回调函数（即then的第二个参数），总是使用catch方法\n  2.promise.all()/race()方法\n  ```\n  var p = Promise.all([p1,p2,p3]);//三个promise对象全部resolve后p才resolve\n  var p = Promise.race([p1,p2,p3]);//三个中有一个率先resolve，p就resolve\n  ```\n  3.promise.resove(),将对象转换成promise对象`var jsPromise = Promise.resolve($.ajax('/whatever.json'));`\n    Promise.reject(reason)方法也会返回一个新的Promise实例，该实例的状态为rejected。它的参数用法与Promise.resolve方法完全一致。\n   \n   ```\n    var p = Promise.reject('出错了');\n    // 等同于\n    var p = new Promise((resolve, reject) => reject('出错了'))\n\n    p.then(null, function (s){\n    console.log(s)\n    });\n    // 出错了\n    \n   ```\n  4.then.done()/finally(),一个用来结束promise()，一个用来表示不管什么状态最后都会执行的操作\n\n* class\n  1.constructor()构造函数\n  2.类内部的方法直接写就行，不用加function 关键字\n  3.私有方法，es6不提供，可以以下实现\n\n    ```\n       class Widget {\n\n     // 公有方法\n     foo (baz) {\n    this._bar(baz);\n     }\n\n     // 私有方法\n     _bar(baz) {\n    return this.snaf = baz;\n    }\n\n     // ...\n     }\n    ```\n      \n    ```\n      class Widget {\n     foo (baz) {\n    bar.call(this, baz);\n     }\n\n    // ...\n     }\n\n     function bar(baz) {\n     return this.snaf = baz;\n     }\n    ```\n  3.继承，extends\n   ```\n   class dog extends Animal\n   {\n     constructor(name,age)\n     {\n     super(name);//必须调用父类构造方法，不然得不到this对象\n     this.age=age;\n   }\n\n   }\n   ```\n  4.get set ，来对属性的读取进行拦截\n  5.静态方法，直接加static关键字\n\n* Decorator，只能加在类、类的方法上，不能加在函数上,es7的提案，es2015的话不支持\n\n* module\n  1.export,可以使用as 重命名输出的接口名\n\n    ```\n     exports{\n      v as exp_v//输出就是exp_v\n     }\n    注意输出必须是接口\n     // 报错\n     export 1;\n\n     // 报错\n      var m = 1;\n     export m;\n     应该是\n     // 写法一\n     export var m = 1;\n\n    // 写法二\n    var m = 1;\n    export {m};\n \n    // 写法三\n    var n = 1;\n    export {n as m};\n\n    ```\n  2.import\n  - 模块加载一,指定变量加载\n\n  ```\n  //profile\n  export{lastname}\n  //file\n   import { lastName  } from './profile';//导入名称必须和导出一样\n   import { lastName as surname } from './profile';也可以指定另外的导出名称\n  ```\n  - 模块加载二，整体加载\n ```\n  // circle.js\n\n   export function area(radius) {\n    return Math.PI * radius * radius;\n  }\n\n   export function circumference(radius) {\n    return 2 * Math.PI * radius;\n   }\n   // main.js\n\n   import { area, circumference } from './circle';\n\n   console.log('圆面积：' + area(4));\n   console.log('圆周长：' + circumference(14));\n   //简单写法\n   import * as circle from './circle';\n\n    console.log('圆面积：' + circle.area(4));\n   console.log('圆周长：' + circle.circumference(14));\n  ```\n  - 模块加载三，默认加载\n   前两种都需要知道输出的接口名字，这种不需要\n  ```\n  // export-default.js\nexport default function () {//default只能使用一次\n  console.log('foo');\n}\n// import-default.js\nimport customName from './export-default';//可以取任意名字\ncustomName(); // 'foo'\n  ```\n\n\n### <span id=\"jquery\">jquery</span>\n\n* $(html,[ownerdoc]) \n\n ```\n  $(\"<div>\", {\n   \"class\": \"test\",\n   text: \"Click me!\",\n   click: function(){\n    $(this).toggleClass(\"test\");\n  }\n  }).appendTo(\"body\");\n\n ```\n \n* $.holdReady(true[false])\n\n* $.date(key,value)\n\n* $.queue() 执行队列函数\n \n    ```\n    $(\"div\").queue(function () {\n          $(this).removeClass(\"newcolor\");\n          $(this).dequeue();\n      });\n\n    ```\n\n* `$`.fn.extend() 扩展元素集方法，$ .extend()扩展jquery对象本身\n \n```\n    jQuery.fn.extend({\n    check: function() {\n    return this.each(function() { this.checked = true; });\n    },\n    uncheck: function() {\n    return this.each(function() { this.checked = false; });\n     }\n    });\n    $(\"input[type=checkbox]\").check();\n    $(\"input[type=radio]\").uncheck();\n     ====\n    $.extend({\n    min:function(a,b){\n      { return a < b ? a : b; }\n    }\n    });\n $.min(2,3);\n\n```\n\n* :even :odd 选择偶数单数\n  ` $(\"li:even\") `\n\n* :gt :lt 匹配索引值大于或小于给定值得元素\n  ` $(\"tr:gt(0)\") `\n\n### <span id=\"angular\">angular</span>\n\n* 指令中的link，controller等的依赖参数为`$element,$attrs`,别写错了，注意$符号，开发时可以不用写依赖，\n\n  后续使用插件即可\n\n* controller as 就是个语法塘，省去了注入$scope,变成了一个js对象\n\n* mg-model 可以实现双向绑定，和`{{x}}`，ng-bind不同，后者是单向的\n\n* 注意$scope.$watch的时候有个坑，监控的对象只能是表达式\n\n```\n$scope.name='sds';\n$scope.$watch('name',xxx)//必须带引号\n不能是\n$scope.$watch(name,xxx)\n\n```\n\n* 创建select用ng-option\n\n* 注意用绝对地址‘html/xxx’不要相对的，'./html/xxx'；\n\n```\n<select ng-model=\"selectedSite\" ng-options=\"x.site for x in sites\">\n</select>\n//遍历的是对象，用site作为option的值\n\n<h1>你选择的是{{selectedSite.site}}</h1>\n<p>网址为{{selectedSite.url}}</p>\n\n```\n\n* nginclude 需要单引号`<div ng-include=\"'./html/user_list.html'\"></div>`\n\n* 动画\n\n 1.引入动画库\n 2.主模块依赖 \n 3.内置的如 ng-if ng-repeat之类的指令动画用class,非内置的用ngClass，这种可以跟表达式，因为该指令本身也是内置动画指令的一种，所以会自动添加...add,add-active,之类的class,如果只是用class的话那不会添加，所以要用ngClass\n\n* 指令\n\n  1. \\'='双向绑定不可以使用`{{x}}`,\n  这是一个双向数据绑定前缀标识符\n使用方法：在元素中使用属性，好比这样<div my-directive age=\"age\"></div>,注意，数据的双向绑定要通过=前缀标识符实现，所以不可以使用`{{x}}`。,等号后面的age是父级的scope里的\n\n### <span id=\"node\">node</span>\n\n* 后端不要用webpack,webpack只为前端设计\n\n* commonjs 规范中expots 和module.exports 区别如下\n\n```\nexports.str = 'a';  \nmodule.exports = function fn() {};  \n//要导出的属性直接挂在exports上，要到处的对象或方法挂在module.exports下，或者全部挂在module.exports下\n\n```\n\n* process 对象，有关进程的一切\n\n* 将静态资源即图片css之类的所在路径传给express，之后就能在路径里访问了\n\n* ***中间件***必须调用next()方法，转交控制权，其他的没有next参数，\n\n### <span id=\"webpack\">webpack+gulp+webpack+babel</span>\n\n* webpack 只是打包以及一些模块相关的工作，gulp是整个工作流涵盖比较广，可以理解为webpack也是gulp的一个task\n\n* 注意gulp的依赖和顺序执行\n\n* gulp的src路径匹配有一点需要注意，比如要匹配src下的A目录的所以文件不能写`src/*`,这样不行，得加上目录`src/**/*.js`,才行，两个星号是目录，一个是文件\n* webpack loader串联！ 注意*执行顺序是从右到左*，比如`style!css!less`,就是先less编译再到css再到style\n\n* 安装webpack后，在js 文件中直接使用commonJs写法 之后打包即可运行，webpack打包过程中会增加支持，，不用使用browsify\n\n* es6写法的话，看这个例子[es6](https://segmentfault.com/a/1190000004457636),注意如果是babel 6以上需要安装`babel-preset-es2015 `\n\n\n* es6在webstorm中调试，\n 1.console \n 2.在bundle 即编译过得文件中找到定位，打断点，编译后改变不大，注意不要压缩\n\n* 一般commonchunk常配合多入口打包，才能提取公共部分，[看这个](https://github.com/webpack/webpack/tree/master/examples/multiple-entry-points)\n* 引入第三方库，不用打包，在页面直接引入，在配置文件中设置externals选项\n\n* webpack(默认配置文件名webpack.config.js) 别忘了 -p 压缩 常用 `webpack -p -w` \n\n* 图片以及静态资源的打包配置如下\n ```\n test: /\\.(jpg|png|jpeg)$/, loader: \"url?limit=61920&name=./images/[hash:8].[ext]\"\n 小于60k会被编译成base64，其他会被放到*指定的输出目录下的imgaes目录下，哈希命名，样式中的路径名字会自动替换\n 注意webpack中的publicPath,用来配置静态资源前缀，一般用于cdn或其他，并不生成目录，只有loader生成目录\n ```\n\n* 配置项`devtool:'source-map'`可以使用sourcemap调试\n\n* 注意当开启css-loader的module模式后，如果样式表里有引用图片资源，路径要往上多写一级，不然会出错，比如原来是`./png/xx.png`应该写成`../img/png/xx.png`这是个[bug](http://stackoverflow.com/questions/34480228/how-to-load-svg-images-in-webpack)\n\n* ***前端工程的流程可以是这样***:\n 1.使用webpack把该打包的打包，该生成的文件生产，不要压缩，不要合并尽量都是独立js或css\n 2.使用gulp对生成的文件再进行相关处理，js（合并）压缩，css 雪碧图 css压缩，文件MD5 和替换\n\n### <span id=\"react\">react</span>\n\n* 组件开头名称必须大写刚好和angular指令相反\n\n* 组件中class 和for属性要写成className htmlFor,因为前者都是保留字段,注意指的是在组件定义中的时候不是ReactDom使用的时候\n如果要添加自定义属性，需要加data-前缀,获取时用`this.refs.test.getAttribute('data-attr')`获取\n\n```\n   var Hello=React.createClass({\n          render :function () {\n          //这里要用className才能得到相应的样式\n              return <div className='ddd' ref='test' data-attr='dddd'>{this.props.class}</div>;\n          }\n      });\n      ReactDOM.render(\n      <Hello name=\"John\" class='ddd' />,\n              document.getElementById('example')\n      );\n```\n\n* 组件中只能有一个顶层标签\n\n* 获取真实dom节点用ref属性\n\n* React.props.children表示引用组件的所有子节点，一般用React.Children(大写)\n来遍历，而不用担心子节点的类型\n\n```\n  React.Children.map(this.props.children, function (child) {\n          return <li>{child}</li>;\n        })\n```\n\n* props state,区分就是前者一旦定义就不再轻易改变，后者是可变的，另外props一半用来外部传参\n\n* 组件内联样式格式`style={`{opacity: this.state.opacity}`}` 不能写成别的，双括号\n\n## <span id=\"project\">项目实践</span>\n\n * [xxx](#xxx)\n\n## <span id=\"interview\">面试准备</span>\n\n * [前端面试问题](https://github.com/h5bp/Front-end-Developer-Interview-Questions/blob/master/Translations/Chinese/README.md#html-相关问题)\n\n\n\n","source":"_posts/前端恢复之路.md","raw":"title: 前端拾遗\ndate: 2016-07-22 16:14:52\ntags: [前端, 学习, html, js, css, angular, react] \n---\n\n > 这将是是一篇零散的学习笔记，用来记录自己重新复习、学习前端种种的知识点。希望我能真正的静下心来充实的度过这段时间。\n\n## 整个笔记会分为以下三大部分\n* [技术理论部分](#technology)\n\n* [项目实践部分](#project)\n\n* [面试准备部分](#interview) \n\n<!--more-->\n\n## <span id=\"technology\">技术理论</span>\n\n * [html](#html)\n * [css](#css)\n * [less](#less)\n * [js](#js)\n * [es6](#es6)\n * [jquery](#jquery)\n * [git](#git)\n * [angular](#angular)\n * [node](#node)\n * [mongo+sql](#mongo)\n * [UnitTest](#UnitTest)\n * [gulp+webpack+babel](#webpack)\n * [浏览器commonjs ]\n * [react](#react)\n\n### <span id=\"css\">css</span>\n\n * box-shadow可以设置多个，这样可以显示层叠效果\n ```\n  box-shadow: 0 1px 1px rgba(0, 0, 0, 0.3),\n  0 6px 0 -3px rgba(255, 255, 255, 0.8),\n  0 7px 1px -3px rgba(0, 0, 0, 0.3),\n  0 43px 0 -6px rgba(255, 255, 255, 0.8),\n  0 44px 2px -6px rgba(0, 0, 0, 0.2);\n ```\n \n * 带有label的checkbox,如果label有for属性，当点击的有for属性的label标签时，对应的Checkbox复选框会被选中，这样就能利用label来修改checkbox样式，首先要隐藏原来的checkbox[看这个](clownvary.github.io/demo/checkbox_demo/checkbox_css.html)\n 同理其他的控件添加label 只要有for（for对应的是id），那么当点击这label时对应的控件便会获得焦点\n * background-size \n  cover 图小于父级块时放大图 填满块\n  contain 图大于父级块时，适当缩小，填满块\n * background-clip 背景色填充区域， content-box padding-box border-box\n\n * display:block;如果这样写的话，比如一个div内有多个span,本来是想都在一行显示的，但加了这的span就成了一个块，单独占满一行，其他的只能挤下去,这个时候可以设置inline-block就好了\n *vertical-align: middle;,垂直居中，常用\n * css遮罩层\n 内嵌一个绝对定位的div,left top 均设置为0，即可覆盖\n ```\n <div class=\"preview\">\n            <img src=\"https://40.media.tumblr.com/a73e79ce9844761d7cdc93d202b5cea1/tumblr_nwh4iomduD1ud7rr3o1_1280.jpg\" alt=\"proj1\" title=\"proj\">\n            <div class=\"modal-layout\">\n              <div class=\"content\">\n                <i class=\"fa fa-fire fa-fw fa-3x\"></i>\n              </div>\n\n            </div>\n          </div>\n\n          .modal-layout{\n      width: 100%;\n      height: 195px;\n      background-color: black;\n      opacity: 0.6;\n      z-index: 2;\n      position: absolute;\n      left: 0;\n      top: 0;\n    }\n\n ```\n\n### <span id=\"less\">less</span>\n\n* 变量 mixin 混合 命名空间（注意只能是属性集不能访问变量，如`#base-style > .button `不能有`#base-style >@color`）\n\n* @import 导入，可以导入less,css，别和important弄混了\n\n* 字符串插值，变量可以用像 @{name} 这样的结构，以类似 ruby 和 php 的方式嵌入到字符\n```\n@base-url: \"http://assets.fnord.com\";//一般用在使用静态外部资源时候的配置，就不用js了\nbackground-image: url(\"@{base-url}/images/bg.png\");\n```\n\n### <span id=\"js\">js</span>\n\n* 函数返回函数的调用\n  ```\n    function test(name)\n    {\n      console.log(name);\n      return function(age)\n      {\n        console.log(age);\n      }\n    }\n\n    //调用如下\n    test(‘jary’)(34);//因为第一个方法返回还是个方法，所以直接跟参数\n  ```\n\n### <span id=\"es6\">es6</span>\n\n* [对照这个看](https://gist.github.com/clownvary/f5e5b77f4b376640f70d02fb4fba7b99)\n\n* let 应用for 循环 局部变量\n\n* 数组、对象、字符解构，应用函数参数赋默认值\n```\nfunction ajax(url,{\n  aync=true,\n  cache=true\n})\n```\n\n* string 几个方法 include startWith endWith padStart padEnd\n 1.模板字符串，`my name is ${name}` \n\n* Array 方法，for..of keys()、values()、entries(),from,of(将一组数转化为数组)find,findIndex,filter,fill(填充)\n\n* 函数，拥有length属性，***表示剩余的没有指定默认值的参数个数***，注意不包括rest参数\n  1.rest参数`...iterms`,是一个后续的参数集合数组，注意rest只能是最后一个参数\n  2.扩展运算符`...iterms`好比rest的逆运算\n  3.箭头函数，注意如果直接返回一个对象应该用括号包住\n\n* 对象，\n  1.Object.is(),用来比较两个对象是否严格相等，与=== 意思相近，如`Object.is(+0,-0)//false`\n\n* symbol,为了对象属性的唯一性，新加的js第七种类型，常用来作为标示\n  1.作为对象属相时必须用[]，括住，如\n   ```\n   let s_x=Symbol(\"book\");\n   let me={[s_x]:\"sword\",name:\"tom\"};\n   console.log(me[s_x]);//me[s_x],和me.name访问形式不同\n   ```\n\n* set,不允许有重复的数组，weakset,数组内只能是对象\n  1.set 的for of xxx.keys() 的key和value完全一样\n\n* map,拥有键值对的集合，相比传统对象，它的键可以是对象，而不一定是字符串\n\n* 尽量使用for of ,别用for in,for in 只能读取键名，不能读取值\n\n* generator 函数  用来暂停函数，可用在异步编程的同步操作中，通过next()来调用\n  1.\n  ```\n     function *generator()\n    {\n      yield \"hello\";\n      yield \"world\";\n      return \"ending\";\n    }\n\n  ```\n\n* promise\n  promise的应用主要是可以把任意方法包装后 进行回调\n \n ```\n   class me\n  {\n   testPromise(todo)\n   {\n \n    let p;\n    if(todo==='xxx')\n    {\n      p=Promise.resolve(`成功${todo}`);\n    }\n    else\n    { \n    p=Promise.reject(`失败${todo}`);\n    }\n    return p;\n\n  }\n}\nlet demo=new me();\ndemo.testPromise('xsxx').then(x=>console.log(x),x=>console.log(x))\n  ```\n  ```\n  var promise = new Promise(function(resolve, reject) {\n  // ... some code\n\n  if (/* 异步操作成功 */){\n    resolve(value);//带一个参数是可以把这个参数传给then回调方法\n  } else {\n    reject(error);\n  }\n});\npromise.then(function(value){//then有两个参数，成功的和失败的，失败的参数是可选的，一般建议都不写，而是直接写catch捕获错误\n  ....\n},function(error){\n  ...\n}).catch()\n\n  ```\n  1.一般来说，不要在then方法里面定义Reject状态的回调函数（即then的第二个参数），总是使用catch方法\n  2.promise.all()/race()方法\n  ```\n  var p = Promise.all([p1,p2,p3]);//三个promise对象全部resolve后p才resolve\n  var p = Promise.race([p1,p2,p3]);//三个中有一个率先resolve，p就resolve\n  ```\n  3.promise.resove(),将对象转换成promise对象`var jsPromise = Promise.resolve($.ajax('/whatever.json'));`\n    Promise.reject(reason)方法也会返回一个新的Promise实例，该实例的状态为rejected。它的参数用法与Promise.resolve方法完全一致。\n   \n   ```\n    var p = Promise.reject('出错了');\n    // 等同于\n    var p = new Promise((resolve, reject) => reject('出错了'))\n\n    p.then(null, function (s){\n    console.log(s)\n    });\n    // 出错了\n    \n   ```\n  4.then.done()/finally(),一个用来结束promise()，一个用来表示不管什么状态最后都会执行的操作\n\n* class\n  1.constructor()构造函数\n  2.类内部的方法直接写就行，不用加function 关键字\n  3.私有方法，es6不提供，可以以下实现\n\n    ```\n       class Widget {\n\n     // 公有方法\n     foo (baz) {\n    this._bar(baz);\n     }\n\n     // 私有方法\n     _bar(baz) {\n    return this.snaf = baz;\n    }\n\n     // ...\n     }\n    ```\n      \n    ```\n      class Widget {\n     foo (baz) {\n    bar.call(this, baz);\n     }\n\n    // ...\n     }\n\n     function bar(baz) {\n     return this.snaf = baz;\n     }\n    ```\n  3.继承，extends\n   ```\n   class dog extends Animal\n   {\n     constructor(name,age)\n     {\n     super(name);//必须调用父类构造方法，不然得不到this对象\n     this.age=age;\n   }\n\n   }\n   ```\n  4.get set ，来对属性的读取进行拦截\n  5.静态方法，直接加static关键字\n\n* Decorator，只能加在类、类的方法上，不能加在函数上,es7的提案，es2015的话不支持\n\n* module\n  1.export,可以使用as 重命名输出的接口名\n\n    ```\n     exports{\n      v as exp_v//输出就是exp_v\n     }\n    注意输出必须是接口\n     // 报错\n     export 1;\n\n     // 报错\n      var m = 1;\n     export m;\n     应该是\n     // 写法一\n     export var m = 1;\n\n    // 写法二\n    var m = 1;\n    export {m};\n \n    // 写法三\n    var n = 1;\n    export {n as m};\n\n    ```\n  2.import\n  - 模块加载一,指定变量加载\n\n  ```\n  //profile\n  export{lastname}\n  //file\n   import { lastName  } from './profile';//导入名称必须和导出一样\n   import { lastName as surname } from './profile';也可以指定另外的导出名称\n  ```\n  - 模块加载二，整体加载\n ```\n  // circle.js\n\n   export function area(radius) {\n    return Math.PI * radius * radius;\n  }\n\n   export function circumference(radius) {\n    return 2 * Math.PI * radius;\n   }\n   // main.js\n\n   import { area, circumference } from './circle';\n\n   console.log('圆面积：' + area(4));\n   console.log('圆周长：' + circumference(14));\n   //简单写法\n   import * as circle from './circle';\n\n    console.log('圆面积：' + circle.area(4));\n   console.log('圆周长：' + circle.circumference(14));\n  ```\n  - 模块加载三，默认加载\n   前两种都需要知道输出的接口名字，这种不需要\n  ```\n  // export-default.js\nexport default function () {//default只能使用一次\n  console.log('foo');\n}\n// import-default.js\nimport customName from './export-default';//可以取任意名字\ncustomName(); // 'foo'\n  ```\n\n\n### <span id=\"jquery\">jquery</span>\n\n* $(html,[ownerdoc]) \n\n ```\n  $(\"<div>\", {\n   \"class\": \"test\",\n   text: \"Click me!\",\n   click: function(){\n    $(this).toggleClass(\"test\");\n  }\n  }).appendTo(\"body\");\n\n ```\n \n* $.holdReady(true[false])\n\n* $.date(key,value)\n\n* $.queue() 执行队列函数\n \n    ```\n    $(\"div\").queue(function () {\n          $(this).removeClass(\"newcolor\");\n          $(this).dequeue();\n      });\n\n    ```\n\n* `$`.fn.extend() 扩展元素集方法，$ .extend()扩展jquery对象本身\n \n```\n    jQuery.fn.extend({\n    check: function() {\n    return this.each(function() { this.checked = true; });\n    },\n    uncheck: function() {\n    return this.each(function() { this.checked = false; });\n     }\n    });\n    $(\"input[type=checkbox]\").check();\n    $(\"input[type=radio]\").uncheck();\n     ====\n    $.extend({\n    min:function(a,b){\n      { return a < b ? a : b; }\n    }\n    });\n $.min(2,3);\n\n```\n\n* :even :odd 选择偶数单数\n  ` $(\"li:even\") `\n\n* :gt :lt 匹配索引值大于或小于给定值得元素\n  ` $(\"tr:gt(0)\") `\n\n### <span id=\"angular\">angular</span>\n\n* 指令中的link，controller等的依赖参数为`$element,$attrs`,别写错了，注意$符号，开发时可以不用写依赖，\n\n  后续使用插件即可\n\n* controller as 就是个语法塘，省去了注入$scope,变成了一个js对象\n\n* mg-model 可以实现双向绑定，和`{{x}}`，ng-bind不同，后者是单向的\n\n* 注意$scope.$watch的时候有个坑，监控的对象只能是表达式\n\n```\n$scope.name='sds';\n$scope.$watch('name',xxx)//必须带引号\n不能是\n$scope.$watch(name,xxx)\n\n```\n\n* 创建select用ng-option\n\n* 注意用绝对地址‘html/xxx’不要相对的，'./html/xxx'；\n\n```\n<select ng-model=\"selectedSite\" ng-options=\"x.site for x in sites\">\n</select>\n//遍历的是对象，用site作为option的值\n\n<h1>你选择的是{{selectedSite.site}}</h1>\n<p>网址为{{selectedSite.url}}</p>\n\n```\n\n* nginclude 需要单引号`<div ng-include=\"'./html/user_list.html'\"></div>`\n\n* 动画\n\n 1.引入动画库\n 2.主模块依赖 \n 3.内置的如 ng-if ng-repeat之类的指令动画用class,非内置的用ngClass，这种可以跟表达式，因为该指令本身也是内置动画指令的一种，所以会自动添加...add,add-active,之类的class,如果只是用class的话那不会添加，所以要用ngClass\n\n* 指令\n\n  1. \\'='双向绑定不可以使用`{{x}}`,\n  这是一个双向数据绑定前缀标识符\n使用方法：在元素中使用属性，好比这样<div my-directive age=\"age\"></div>,注意，数据的双向绑定要通过=前缀标识符实现，所以不可以使用`{{x}}`。,等号后面的age是父级的scope里的\n\n### <span id=\"node\">node</span>\n\n* 后端不要用webpack,webpack只为前端设计\n\n* commonjs 规范中expots 和module.exports 区别如下\n\n```\nexports.str = 'a';  \nmodule.exports = function fn() {};  \n//要导出的属性直接挂在exports上，要到处的对象或方法挂在module.exports下，或者全部挂在module.exports下\n\n```\n\n* process 对象，有关进程的一切\n\n* 将静态资源即图片css之类的所在路径传给express，之后就能在路径里访问了\n\n* ***中间件***必须调用next()方法，转交控制权，其他的没有next参数，\n\n### <span id=\"webpack\">webpack+gulp+webpack+babel</span>\n\n* webpack 只是打包以及一些模块相关的工作，gulp是整个工作流涵盖比较广，可以理解为webpack也是gulp的一个task\n\n* 注意gulp的依赖和顺序执行\n\n* gulp的src路径匹配有一点需要注意，比如要匹配src下的A目录的所以文件不能写`src/*`,这样不行，得加上目录`src/**/*.js`,才行，两个星号是目录，一个是文件\n* webpack loader串联！ 注意*执行顺序是从右到左*，比如`style!css!less`,就是先less编译再到css再到style\n\n* 安装webpack后，在js 文件中直接使用commonJs写法 之后打包即可运行，webpack打包过程中会增加支持，，不用使用browsify\n\n* es6写法的话，看这个例子[es6](https://segmentfault.com/a/1190000004457636),注意如果是babel 6以上需要安装`babel-preset-es2015 `\n\n\n* es6在webstorm中调试，\n 1.console \n 2.在bundle 即编译过得文件中找到定位，打断点，编译后改变不大，注意不要压缩\n\n* 一般commonchunk常配合多入口打包，才能提取公共部分，[看这个](https://github.com/webpack/webpack/tree/master/examples/multiple-entry-points)\n* 引入第三方库，不用打包，在页面直接引入，在配置文件中设置externals选项\n\n* webpack(默认配置文件名webpack.config.js) 别忘了 -p 压缩 常用 `webpack -p -w` \n\n* 图片以及静态资源的打包配置如下\n ```\n test: /\\.(jpg|png|jpeg)$/, loader: \"url?limit=61920&name=./images/[hash:8].[ext]\"\n 小于60k会被编译成base64，其他会被放到*指定的输出目录下的imgaes目录下，哈希命名，样式中的路径名字会自动替换\n 注意webpack中的publicPath,用来配置静态资源前缀，一般用于cdn或其他，并不生成目录，只有loader生成目录\n ```\n\n* 配置项`devtool:'source-map'`可以使用sourcemap调试\n\n* 注意当开启css-loader的module模式后，如果样式表里有引用图片资源，路径要往上多写一级，不然会出错，比如原来是`./png/xx.png`应该写成`../img/png/xx.png`这是个[bug](http://stackoverflow.com/questions/34480228/how-to-load-svg-images-in-webpack)\n\n* ***前端工程的流程可以是这样***:\n 1.使用webpack把该打包的打包，该生成的文件生产，不要压缩，不要合并尽量都是独立js或css\n 2.使用gulp对生成的文件再进行相关处理，js（合并）压缩，css 雪碧图 css压缩，文件MD5 和替换\n\n### <span id=\"react\">react</span>\n\n* 组件开头名称必须大写刚好和angular指令相反\n\n* 组件中class 和for属性要写成className htmlFor,因为前者都是保留字段,注意指的是在组件定义中的时候不是ReactDom使用的时候\n如果要添加自定义属性，需要加data-前缀,获取时用`this.refs.test.getAttribute('data-attr')`获取\n\n```\n   var Hello=React.createClass({\n          render :function () {\n          //这里要用className才能得到相应的样式\n              return <div className='ddd' ref='test' data-attr='dddd'>{this.props.class}</div>;\n          }\n      });\n      ReactDOM.render(\n      <Hello name=\"John\" class='ddd' />,\n              document.getElementById('example')\n      );\n```\n\n* 组件中只能有一个顶层标签\n\n* 获取真实dom节点用ref属性\n\n* React.props.children表示引用组件的所有子节点，一般用React.Children(大写)\n来遍历，而不用担心子节点的类型\n\n```\n  React.Children.map(this.props.children, function (child) {\n          return <li>{child}</li>;\n        })\n```\n\n* props state,区分就是前者一旦定义就不再轻易改变，后者是可变的，另外props一半用来外部传参\n\n* 组件内联样式格式`style={`{opacity: this.state.opacity}`}` 不能写成别的，双括号\n\n## <span id=\"project\">项目实践</span>\n\n * [xxx](#xxx)\n\n## <span id=\"interview\">面试准备</span>\n\n * [前端面试问题](https://github.com/h5bp/Front-end-Developer-Interview-Questions/blob/master/Translations/Chinese/README.md#html-相关问题)\n\n\n\n","slug":"前端恢复之路","published":1,"updated":"2016-09-15T16:56:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwc8j8o6000mjh9k0gjzgbso","content":"<blockquote>\n<p>这将是是一篇零散的学习笔记，用来记录自己重新复习、学习前端种种的知识点。希望我能真正的静下心来充实的度过这段时间。</p>\n</blockquote>\n<h2 id=\"整个笔记会分为以下三大部分\"><a href=\"#整个笔记会分为以下三大部分\" class=\"headerlink\" title=\"整个笔记会分为以下三大部分\"></a>整个笔记会分为以下三大部分</h2><ul>\n<li><p><a href=\"#technology\">技术理论部分</a></p>\n</li>\n<li><p><a href=\"#project\">项目实践部分</a></p>\n</li>\n<li><p><a href=\"#interview\">面试准备部分</a> </p>\n</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"技术理论\"><a href=\"#技术理论\" class=\"headerlink\" title=\"技术理论\"></a><span id=\"technology\">技术理论</span></h2><ul>\n<li><a href=\"#html\">html</a></li>\n<li><a href=\"#css\">css</a></li>\n<li><a href=\"#less\">less</a></li>\n<li><a href=\"#js\">js</a></li>\n<li><a href=\"#es6\">es6</a></li>\n<li><a href=\"#jquery\">jquery</a></li>\n<li><a href=\"#git\">git</a></li>\n<li><a href=\"#angular\">angular</a></li>\n<li><a href=\"#node\">node</a></li>\n<li><a href=\"#mongo\">mongo+sql</a></li>\n<li><a href=\"#UnitTest\">UnitTest</a></li>\n<li><a href=\"#webpack\">gulp+webpack+babel</a></li>\n<li>[浏览器commonjs ]</li>\n<li><a href=\"#react\">react</a></li>\n</ul>\n<h3 id=\"css\"><a href=\"#css\" class=\"headerlink\" title=\"css\"></a><span id=\"css\">css</span></h3><ul>\n<li>box-shadow可以设置多个，这样可以显示层叠效果<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">box-shadow: 0 1px 1px rgba(0, 0, 0, 0.3),</div><div class=\"line\">0 6px 0 -3px rgba(255, 255, 255, 0.8),</div><div class=\"line\">0 7px 1px -3px rgba(0, 0, 0, 0.3),</div><div class=\"line\">0 43px 0 -6px rgba(255, 255, 255, 0.8),</div><div class=\"line\">0 44px 2px -6px rgba(0, 0, 0, 0.2);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>带有label的checkbox,如果label有for属性，当点击的有for属性的label标签时，对应的Checkbox复选框会被选中，这样就能利用label来修改checkbox样式，首先要隐藏原来的checkbox<a href=\"clownvary.github.io/demo/checkbox_demo/checkbox_css.html\">看这个</a><br>同理其他的控件添加label 只要有for（for对应的是id），那么当点击这label时对应的控件便会获得焦点</li>\n<li>background-size<br>cover 图小于父级块时放大图 填满块<br>contain 图大于父级块时，适当缩小，填满块</li>\n<li><p>background-clip 背景色填充区域， content-box padding-box border-box</p>\n</li>\n<li><p>display:block;如果这样写的话，比如一个div内有多个span,本来是想都在一行显示的，但加了这的span就成了一个块，单独占满一行，其他的只能挤下去,这个时候可以设置inline-block就好了<br>*vertical-align: middle;,垂直居中，常用</p>\n</li>\n<li>css遮罩层<br>内嵌一个绝对定位的div,left top 均设置为0，即可覆盖<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;<span class=\"selector-tag\">div</span> class=<span class=\"string\">\"preview\"</span>&gt;</div><div class=\"line\">           &lt;<span class=\"selector-tag\">img</span> src=<span class=\"string\">\"https://40.media.tumblr.com/a73e79ce9844761d7cdc93d202b5cea1/tumblr_nwh4iomduD1ud7rr3o1_1280.jpg\"</span> alt=<span class=\"string\">\"proj1\"</span> title=<span class=\"string\">\"proj\"</span>&gt;</div><div class=\"line\">           &lt;<span class=\"selector-tag\">div</span> class=<span class=\"string\">\"modal-layout\"</span>&gt;</div><div class=\"line\">             &lt;<span class=\"selector-tag\">div</span> class=<span class=\"string\">\"content\"</span>&gt;</div><div class=\"line\">               &lt;<span class=\"selector-tag\">i</span> class=<span class=\"string\">\"fa fa-fire fa-fw fa-3x\"</span>&gt;&lt;/i&gt;</div><div class=\"line\">             &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">           &lt;/div&gt;</div><div class=\"line\">         &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">         .modal-layout&#123;</div><div class=\"line\">     <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">     <span class=\"attribute\">height</span>: <span class=\"number\">195px</span>;</div><div class=\"line\">     <span class=\"attribute\">background-color</span>: black;</div><div class=\"line\">     <span class=\"attribute\">opacity</span>: <span class=\"number\">0.6</span>;</div><div class=\"line\">     <span class=\"attribute\">z-index</span>: <span class=\"number\">2</span>;</div><div class=\"line\">     <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">     <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</div><div class=\"line\">     <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"less\"><a href=\"#less\" class=\"headerlink\" title=\"less\"></a><span id=\"less\">less</span></h3><ul>\n<li><p>变量 mixin 混合 命名空间（注意只能是属性集不能访问变量，如<code>#base-style &gt; .button</code>不能有<code>#base-style &gt;@color</code>）</p>\n</li>\n<li><p>@import 导入，可以导入less,css，别和important弄混了</p>\n</li>\n<li><p>字符串插值，变量可以用像 @{name} 这样的结构，以类似 ruby 和 php 的方式嵌入到字符</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@base-url:</span> <span class=\"string\">\"http://assets.fnord.com\"</span>;<span class=\"comment\">//一般用在使用静态外部资源时候的配置，就不用js了</span></div><div class=\"line\"><span class=\"attribute\">background-image</span>: url(<span class=\"string\">\"@&#123;base-url&#125;/images/bg.png\"</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"js\"><a href=\"#js\" class=\"headerlink\" title=\"js\"></a><span id=\"js\">js</span></h3><ul>\n<li>函数返回函数的调用<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">name</span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(name);</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">age</span>)</span></div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(age);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//调用如下</span></div><div class=\"line\">test(‘jary’)(<span class=\"number\">34</span>);<span class=\"comment\">//因为第一个方法返回还是个方法，所以直接跟参数</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"es6\"><a href=\"#es6\" class=\"headerlink\" title=\"es6\"></a><span id=\"es6\">es6</span></h3><ul>\n<li><p><a href=\"https://gist.github.com/clownvary/f5e5b77f4b376640f70d02fb4fba7b99\" target=\"_blank\" rel=\"external\">对照这个看</a></p>\n</li>\n<li><p>let 应用for 循环 局部变量</p>\n</li>\n<li><p>数组、对象、字符解构，应用函数参数赋默认值</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ajax</span></span>(url,&#123;</div><div class=\"line\">  aync=<span class=\"literal\">true</span>,</div><div class=\"line\">  cache=<span class=\"literal\">true</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>string 几个方法 include startWith endWith padStart padEnd<br>1.模板字符串，<code>my name is ${name}</code> </p>\n</li>\n<li><p>Array 方法，for..of keys()、values()、entries(),from,of(将一组数转化为数组)find,findIndex,filter,fill(填充)</p>\n</li>\n<li><p>函数，拥有length属性，<strong><em>表示剩余的没有指定默认值的参数个数</em></strong>，注意不包括rest参数<br>1.rest参数<code>...iterms</code>,是一个后续的参数集合数组，注意rest只能是最后一个参数<br>2.扩展运算符<code>...iterms</code>好比rest的逆运算<br>3.箭头函数，注意如果直接返回一个对象应该用括号包住</p>\n</li>\n<li><p>对象，<br>1.Object.is(),用来比较两个对象是否严格相等，与=== 意思相近，如<code>Object.is(+0,-0)//false</code></p>\n</li>\n<li><p>symbol,为了对象属性的唯一性，新加的js第七种类型，常用来作为标示<br>1.作为对象属相时必须用[]，括住，如</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> s_x=<span class=\"built_in\">Symbol</span>(<span class=\"string\">\"book\"</span>);</div><div class=\"line\"><span class=\"keyword\">let</span> me=&#123;[s_x]:<span class=\"string\">\"sword\"</span>,<span class=\"attr\">name</span>:<span class=\"string\">\"tom\"</span>&#125;;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(me[s_x]);<span class=\"comment\">//me[s_x],和me.name访问形式不同</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>set,不允许有重复的数组，weakset,数组内只能是对象<br>1.set 的for of xxx.keys() 的key和value完全一样</p>\n</li>\n<li><p>map,拥有键值对的集合，相比传统对象，它的键可以是对象，而不一定是字符串</p>\n</li>\n<li><p>尽量使用for of ,别用for in,for in 只能读取键名，不能读取值</p>\n</li>\n<li><p>generator 函数  用来暂停函数，可用在异步编程的同步操作中，通过next()来调用<br>1.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">generator</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">\"hello\"</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">\"world\"</span>;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">\"ending\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>promise<br>promise的应用主要是可以把任意方法包装后 进行回调</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">   <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">me</span></span></div><div class=\"line\">  &#123;</div><div class=\"line\">   testPromise(todo)</div><div class=\"line\">   &#123;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">let</span> p;</div><div class=\"line\">    <span class=\"keyword\">if</span>(todo===<span class=\"string\">'xxx'</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">      p=<span class=\"built_in\">Promise</span>.resolve(<span class=\"string\">`成功<span class=\"subst\">$&#123;todo&#125;</span>`</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">    &#123; </div><div class=\"line\">    p=<span class=\"built_in\">Promise</span>.reject(<span class=\"string\">`失败<span class=\"subst\">$&#123;todo&#125;</span>`</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> p;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> demo=<span class=\"keyword\">new</span> me();</div><div class=\"line\">demo.testPromise(<span class=\"string\">'xsxx'</span>).then(<span class=\"function\"><span class=\"params\">x</span>=&gt;</span><span class=\"built_in\">console</span>.log(x),x=&gt;<span class=\"built_in\">console</span>.log(x))</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ... some code</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"comment\">/* 异步操作成功 */</span>)&#123;</div><div class=\"line\">    resolve(value);<span class=\"comment\">//带一个参数是可以把这个参数传给then回调方法</span></div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    reject(error);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">promise.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;<span class=\"comment\">//then有两个参数，成功的和失败的，失败的参数是可选的，一般建议都不写，而是直接写catch捕获错误</span></div><div class=\"line\">  ....</div><div class=\"line\">&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>)</span>&#123;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;).catch()</div></pre></td></tr></table></figure>\n<p>1.一般来说，不要在then方法里面定义Reject状态的回调函数（即then的第二个参数），总是使用catch方法<br>2.promise.all()/race()方法</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">var</span> p = Promise.all([<span class=\"built_in\">p1</span>,<span class=\"built_in\">p2</span>,<span class=\"built_in\">p3</span>])<span class=\"comment\">;//三个promise对象全部resolve后p才resolve</span></div><div class=\"line\"><span class=\"symbol\">var</span> p = Promise.race([<span class=\"built_in\">p1</span>,<span class=\"built_in\">p2</span>,<span class=\"built_in\">p3</span>])<span class=\"comment\">;//三个中有一个率先resolve，p就resolve</span></div></pre></td></tr></table></figure>\n<p>3.promise.resove(),将对象转换成promise对象<code>var jsPromise = Promise.resolve($.ajax(&#39;/whatever.json&#39;));</code><br>  Promise.reject(reason)方法也会返回一个新的Promise实例，该实例的状态为rejected。它的参数用法与Promise.resolve方法完全一致。</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"built_in\">Promise</span>.reject(<span class=\"string\">'出错了'</span>);</div><div class=\"line\"><span class=\"comment\">// 等同于</span></div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> reject(<span class=\"string\">'出错了'</span>))</div><div class=\"line\"></div><div class=\"line\">p.then(<span class=\"literal\">null</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">s</span>)</span>&#123;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(s)</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 出错了</span></div></pre></td></tr></table></figure>\n<p>4.then.done()/finally(),一个用来结束promise()，一个用来表示不管什么状态最后都会执行的操作</p>\n</li>\n<li><p>class<br>1.constructor()构造函数<br>2.类内部的方法直接写就行，不用加function 关键字<br>3.私有方法，es6不提供，可以以下实现</p>\n  <figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">   <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Widget</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">// 公有方法</span></div><div class=\"line\"> foo (baz) &#123;</div><div class=\"line\"><span class=\"keyword\">this</span>._bar(baz);</div><div class=\"line\"> &#125;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">// 私有方法</span></div><div class=\"line\"> _bar(baz) &#123;</div><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.snaf = baz;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">// ...</span></div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<pre><code><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Widget</span> </span>&#123;</div><div class=\"line\"> foo (baz) &#123;</div><div class=\"line\">bar.call(<span class=\"keyword\">this</span>, baz);</div><div class=\"line\"> &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// ...</span></div><div class=\"line\"> &#125;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span><span class=\"params\">(baz)</span> </span>&#123;</div><div class=\"line\"> <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.snaf = baz;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n</code></pre><p>  3.继承，extends<br>   <figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">dog</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  constructor(name,age)</div><div class=\"line\">  &#123;</div><div class=\"line\">  <span class=\"keyword\">super</span>(name);<span class=\"comment\">//必须调用父类构造方法，不然得不到this对象</span></div><div class=\"line\">  <span class=\"keyword\">this</span>.age=age;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>  4.get set ，来对属性的读取进行拦截<br>  5.静态方法，直接加static关键字</p>\n<ul>\n<li><p>Decorator，只能加在类、类的方法上，不能加在函数上,es7的提案，es2015的话不支持</p>\n</li>\n<li><p>module<br>1.export,可以使用as 重命名输出的接口名</p>\n  <figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"> exports&#123;</div><div class=\"line\">  v <span class=\"keyword\">as</span> exp_v<span class=\"comment\">//输出就是exp_v</span></div><div class=\"line\"> &#125;</div><div class=\"line\">注意输出必须是接口</div><div class=\"line\"> <span class=\"comment\">// 报错</span></div><div class=\"line\"> <span class=\"keyword\">export</span> <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">// 报错</span></div><div class=\"line\">  <span class=\"keyword\">var</span> m = <span class=\"number\">1</span>;</div><div class=\"line\"> <span class=\"keyword\">export</span> m;</div><div class=\"line\"> 应该是</div><div class=\"line\"> <span class=\"comment\">// 写法一</span></div><div class=\"line\"> <span class=\"keyword\">export</span> <span class=\"keyword\">var</span> m = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 写法二</span></div><div class=\"line\"><span class=\"keyword\">var</span> m = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">export</span> &#123;m&#125;;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">// 写法三</span></div><div class=\"line\"><span class=\"keyword\">var</span> n = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">export</span> &#123;n <span class=\"keyword\">as</span> m&#125;;</div></pre></td></tr></table></figure>\n<p>2.import</p>\n<ul>\n<li>模块加载一,指定变量加载</li>\n</ul>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//profile</span></div><div class=\"line\"><span class=\"keyword\">export</span>&#123;lastname&#125;</div><div class=\"line\"><span class=\"comment\">//file</span></div><div class=\"line\"> <span class=\"keyword\">import</span> &#123; lastName  &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./profile'</span>;<span class=\"comment\">//导入名称必须和导出一样</span></div><div class=\"line\"> <span class=\"keyword\">import</span> &#123; lastName <span class=\"keyword\">as</span> surname &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./profile'</span>;也可以指定另外的导出名称</div></pre></td></tr></table></figure>\n<ul>\n<li><p>模块加载二，整体加载</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// circle.js</span></div><div class=\"line\"></div><div class=\"line\"> <span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">area</span>(<span class=\"params\">radius</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.PI * radius * radius;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">circumference</span>(<span class=\"params\">radius</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.PI * radius;</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"comment\">// main.js</span></div><div class=\"line\"></div><div class=\"line\"> <span class=\"keyword\">import</span> &#123; area, circumference &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./circle'</span>;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">'圆面积：'</span> + area(<span class=\"number\">4</span>));</div><div class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">'圆周长：'</span> + circumference(<span class=\"number\">14</span>));</div><div class=\"line\"> <span class=\"comment\">//简单写法</span></div><div class=\"line\"> <span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> circle <span class=\"keyword\">from</span> <span class=\"string\">'./circle'</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'圆面积：'</span> + circle.area(<span class=\"number\">4</span>));</div><div class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">'圆周长：'</span> + circle.circumference(<span class=\"number\">14</span>));</div></pre></td></tr></table></figure>\n</li>\n<li><p>模块加载三，默认加载<br>前两种都需要知道输出的接口名字，这种不需要</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"comment\">// export-default.js</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;<span class=\"comment\">//default只能使用一次</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'foo'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// import-default.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> customName <span class=\"keyword\">from</span> <span class=\"string\">'./export-default'</span>;<span class=\"comment\">//可以取任意名字</span></div><div class=\"line\">customName(); <span class=\"comment\">// 'foo'</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"jquery\"><a href=\"#jquery\" class=\"headerlink\" title=\"jquery\"></a><span id=\"jquery\">jquery</span></h3><ul>\n<li><p>$(html,[ownerdoc]) </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"&lt;div&gt;\"</span>, &#123;</div><div class=\"line\"> <span class=\"string\">\"class\"</span>: <span class=\"string\">\"test\"</span>,</div><div class=\"line\"> <span class=\"attr\">text</span>: <span class=\"string\">\"Click me!\"</span>,</div><div class=\"line\"> <span class=\"attr\">click</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  $(<span class=\"keyword\">this</span>).toggleClass(<span class=\"string\">\"test\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;).appendTo(<span class=\"string\">\"body\"</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>$.holdReady(true[false])</p>\n</li>\n<li><p>$.date(key,value)</p>\n</li>\n<li><p>$.queue() 执行队列函数</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"div\"</span>).queue(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      $(<span class=\"keyword\">this</span>).removeClass(<span class=\"string\">\"newcolor\"</span>);</div><div class=\"line\">      $(<span class=\"keyword\">this</span>).dequeue();</div><div class=\"line\">  &#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>$</code>.fn.extend() 扩展元素集方法，$ .extend()扩展jquery对象本身</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">   jQuery.fn.extend(&#123;</div><div class=\"line\">   <span class=\"attr\">check</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">this</span>.checked = <span class=\"literal\">true</span>; &#125;);</div><div class=\"line\">   &#125;,</div><div class=\"line\">   <span class=\"attr\">uncheck</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">this</span>.checked = <span class=\"literal\">false</span>; &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">   &#125;);</div><div class=\"line\">   $(<span class=\"string\">\"input[type=checkbox]\"</span>).check();</div><div class=\"line\">   $(<span class=\"string\">\"input[type=radio]\"</span>).uncheck();</div><div class=\"line\">    ====</div><div class=\"line\">   $.extend(&#123;</div><div class=\"line\">   <span class=\"attr\">min</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</div><div class=\"line\">     &#123; <span class=\"keyword\">return</span> a &lt; b ? a : b; &#125;</div><div class=\"line\">   &#125;</div><div class=\"line\">   &#125;);</div><div class=\"line\">$.min(<span class=\"number\">2</span>,<span class=\"number\">3</span>);</div></pre></td></tr></table></figure>\n<ul>\n<li><p>:even :odd 选择偶数单数<br><code>$(&quot;li:even&quot;)</code></p>\n</li>\n<li><p>:gt :lt 匹配索引值大于或小于给定值得元素<br><code>$(&quot;tr:gt(0)&quot;)</code></p>\n</li>\n</ul>\n<h3 id=\"angular\"><a href=\"#angular\" class=\"headerlink\" title=\"angular\"></a><span id=\"angular\">angular</span></h3><ul>\n<li><p>指令中的link，controller等的依赖参数为<code>$element,$attrs</code>,别写错了，注意$符号，开发时可以不用写依赖，</p>\n<p>后续使用插件即可</p>\n</li>\n<li><p>controller as 就是个语法塘，省去了注入$scope,变成了一个js对象</p>\n</li>\n<li><p>mg-model 可以实现双向绑定，和<code></code>，ng-bind不同，后者是单向的</p>\n</li>\n<li><p>注意$scope.$watch的时候有个坑，监控的对象只能是表达式</p>\n</li>\n</ul>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$scope</span>.name=<span class=\"string\">'sds'</span>;</div><div class=\"line\"><span class=\"variable\">$scope</span>.<span class=\"variable\">$watch</span>(<span class=\"string\">'name'</span>,xxx)<span class=\"regexp\">//</span>必须带引号</div><div class=\"line\">不能是</div><div class=\"line\"><span class=\"variable\">$scope</span>.<span class=\"variable\">$watch</span>(name,xxx)</div></pre></td></tr></table></figure>\n<ul>\n<li><p>创建select用ng-option</p>\n</li>\n<li><p>注意用绝对地址‘html/xxx’不要相对的，’./html/xxx’；</p>\n</li>\n</ul>\n<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"selectedSite\"</span> <span class=\"attr\">ng-options</span>=<span class=\"string\">\"x.site for x in sites\"</span>&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></div><div class=\"line\">//遍历的是对象，用site作为option的值</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>你选择的是<span class=\"template-variable\">&#123;&#123;selectedSite.site&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>网址为<span class=\"template-variable\">&#123;&#123;selectedSite.url&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<ul>\n<li><p>nginclude 需要单引号<code>&lt;div ng-include=&quot;&#39;./html/user_list.html&#39;&quot;&gt;&lt;/div&gt;</code></p>\n</li>\n<li><p>动画</p>\n<p>1.引入动画库<br>2.主模块依赖<br>3.内置的如 ng-if ng-repeat之类的指令动画用class,非内置的用ngClass，这种可以跟表达式，因为该指令本身也是内置动画指令的一种，所以会自动添加…add,add-active,之类的class,如果只是用class的话那不会添加，所以要用ngClass</p>\n</li>\n<li><p>指令</p>\n<ol>\n<li>\\’=’双向绑定不可以使用<code></code>,<br>这是一个双向数据绑定前缀标识符<br>使用方法：在元素中使用属性，好比这样<div my-directive=\"\" age=\"age\"></div>,注意，数据的双向绑定要通过=前缀标识符实现，所以不可以使用<code></code>。,等号后面的age是父级的scope里的</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"node\"><a href=\"#node\" class=\"headerlink\" title=\"node\"></a><span id=\"node\">node</span></h3><ul>\n<li><p>后端不要用webpack,webpack只为前端设计</p>\n</li>\n<li><p>commonjs 规范中expots 和module.exports 区别如下</p>\n</li>\n</ul>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">exports</span>.str = <span class=\"string\">'a'</span>;  </div><div class=\"line\">module.<span class=\"keyword\">exports</span> = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">()</span> <span class=\"comment\">&#123;&#125;</span>;</span>  </div><div class=\"line\"><span class=\"comment\">//要导出的属性直接挂在exports上，要到处的对象或方法挂在module.exports下，或者全部挂在module.exports下</span></div></pre></td></tr></table></figure>\n<ul>\n<li><p>process 对象，有关进程的一切</p>\n</li>\n<li><p>将静态资源即图片css之类的所在路径传给express，之后就能在路径里访问了</p>\n</li>\n<li><p><strong><em>中间件</em></strong>必须调用next()方法，转交控制权，其他的没有next参数，</p>\n</li>\n</ul>\n<h3 id=\"webpack-gulp-webpack-babel\"><a href=\"#webpack-gulp-webpack-babel\" class=\"headerlink\" title=\"webpack+gulp+webpack+babel\"></a><span id=\"webpack\">webpack+gulp+webpack+babel</span></h3><ul>\n<li><p>webpack 只是打包以及一些模块相关的工作，gulp是整个工作流涵盖比较广，可以理解为webpack也是gulp的一个task</p>\n</li>\n<li><p>注意gulp的依赖和顺序执行</p>\n</li>\n<li><p>gulp的src路径匹配有一点需要注意，比如要匹配src下的A目录的所以文件不能写<code>src/*</code>,这样不行，得加上目录<code>src/**/*.js</code>,才行，两个星号是目录，一个是文件</p>\n</li>\n<li><p>webpack loader串联！ 注意<em>执行顺序是从右到左</em>，比如<code>style!css!less</code>,就是先less编译再到css再到style</p>\n</li>\n<li><p>安装webpack后，在js 文件中直接使用commonJs写法 之后打包即可运行，webpack打包过程中会增加支持，，不用使用browsify</p>\n</li>\n<li><p>es6写法的话，看这个例子<a href=\"https://segmentfault.com/a/1190000004457636\" target=\"_blank\" rel=\"external\">es6</a>,注意如果是babel 6以上需要安装<code>babel-preset-es2015</code></p>\n</li>\n</ul>\n<ul>\n<li><p>es6在webstorm中调试，<br>1.console<br>2.在bundle 即编译过得文件中找到定位，打断点，编译后改变不大，注意不要压缩</p>\n</li>\n<li><p>一般commonchunk常配合多入口打包，才能提取公共部分，<a href=\"https://github.com/webpack/webpack/tree/master/examples/multiple-entry-points\" target=\"_blank\" rel=\"external\">看这个</a></p>\n</li>\n<li><p>引入第三方库，不用打包，在页面直接引入，在配置文件中设置externals选项</p>\n</li>\n<li><p>webpack(默认配置文件名webpack.config.js) 别忘了 -p 压缩 常用 <code>webpack -p -w</code> </p>\n</li>\n<li><p>图片以及静态资源的打包配置如下</p>\n<figure class=\"highlight subunit\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">test: </span>/\\.(jpg|png|jpeg)$/, loader: \"url?limit=61920&amp;name=./images/[hash:8].[ext]\"</div><div class=\"line\">小于60k会被编译成base64，其他会被放到*指定的输出目录下的imgaes目录下，哈希命名，样式中的路径名字会自动替换</div><div class=\"line\">注意webpack中的publicPath,用来配置静态资源前缀，一般用于cdn或其他，并不生成目录，只有loader生成目录</div></pre></td></tr></table></figure>\n</li>\n<li><p>配置项<code>devtool:&#39;source-map&#39;</code>可以使用sourcemap调试</p>\n</li>\n<li><p>注意当开启css-loader的module模式后，如果样式表里有引用图片资源，路径要往上多写一级，不然会出错，比如原来是<code>./png/xx.png</code>应该写成<code>../img/png/xx.png</code>这是个<a href=\"http://stackoverflow.com/questions/34480228/how-to-load-svg-images-in-webpack\" target=\"_blank\" rel=\"external\">bug</a></p>\n</li>\n<li><p><strong><em>前端工程的流程可以是这样</em></strong>:<br>1.使用webpack把该打包的打包，该生成的文件生产，不要压缩，不要合并尽量都是独立js或css<br>2.使用gulp对生成的文件再进行相关处理，js（合并）压缩，css 雪碧图 css压缩，文件MD5 和替换</p>\n</li>\n</ul>\n<h3 id=\"react\"><a href=\"#react\" class=\"headerlink\" title=\"react\"></a><span id=\"react\">react</span></h3><ul>\n<li><p>组件开头名称必须大写刚好和angular指令相反</p>\n</li>\n<li><p>组件中class 和for属性要写成className htmlFor,因为前者都是保留字段,注意指的是在组件定义中的时候不是ReactDom使用的时候<br>如果要添加自定义属性，需要加data-前缀,获取时用<code>this.refs.test.getAttribute(&#39;data-attr&#39;)</code>获取</p>\n</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Hello=React.createClass(&#123;</div><div class=\"line\">       render :function () &#123;</div><div class=\"line\">       <span class=\"comment\">//这里要用className才能得到相应的样式</span></div><div class=\"line\">           <span class=\"keyword\">return</span> &lt;div className=<span class=\"string\">'ddd'</span> ref=<span class=\"string\">'test'</span> <span class=\"keyword\">data</span>-attr=<span class=\"string\">'dddd'</span>&gt;&#123;<span class=\"keyword\">this</span>.props.<span class=\"keyword\">class</span>&#125;&lt;/div&gt;;</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;);</div><div class=\"line\">   ReactDOM.render(</div><div class=\"line\">   &lt;Hello name=<span class=\"string\">\"John\"</span> <span class=\"class\"><span class=\"keyword\">class</span>='<span class=\"title\">ddd</span>' /&gt;,</span></div><div class=\"line\">           <span class=\"type\">document.getElementById</span>(<span class=\"string\">'example'</span>)</div><div class=\"line\">   );</div></pre></td></tr></table></figure>\n<ul>\n<li><p>组件中只能有一个顶层标签</p>\n</li>\n<li><p>获取真实dom节点用ref属性</p>\n</li>\n<li><p>React.props.children表示引用组件的所有子节点，一般用React.Children(大写)<br>来遍历，而不用担心子节点的类型</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">React.Children.map(<span class=\"keyword\">this</span>.props.children, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">child</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>&#123;child&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span>;</div><div class=\"line\">      &#125;)</div></pre></td></tr></table></figure>\n<ul>\n<li><p>props state,区分就是前者一旦定义就不再轻易改变，后者是可变的，另外props一半用来外部传参</p>\n</li>\n<li><p>组件内联样式格式<code>style={</code>{opacity: this.state.opacity}<code>}</code> 不能写成别的，双括号</p>\n</li>\n</ul>\n<h2 id=\"项目实践\"><a href=\"#项目实践\" class=\"headerlink\" title=\"项目实践\"></a><span id=\"project\">项目实践</span></h2><ul>\n<li><a href=\"#xxx\">xxx</a></li>\n</ul>\n<h2 id=\"面试准备\"><a href=\"#面试准备\" class=\"headerlink\" title=\"面试准备\"></a><span id=\"interview\">面试准备</span></h2><ul>\n<li><a href=\"https://github.com/h5bp/Front-end-Developer-Interview-Questions/blob/master/Translations/Chinese/README.md#html-相关问题\" target=\"_blank\" rel=\"external\">前端面试问题</a></li>\n</ul>\n","excerpt":"<blockquote>\n<p>这将是是一篇零散的学习笔记，用来记录自己重新复习、学习前端种种的知识点。希望我能真正的静下心来充实的度过这段时间。</p>\n</blockquote>\n<h2 id=\"整个笔记会分为以下三大部分\"><a href=\"#整个笔记会分为以下三大部分\" class=\"headerlink\" title=\"整个笔记会分为以下三大部分\"></a>整个笔记会分为以下三大部分</h2><ul>\n<li><p><a href=\"#technology\">技术理论部分</a></p>\n</li>\n<li><p><a href=\"#project\">项目实践部分</a></p>\n</li>\n<li><p><a href=\"#interview\">面试准备部分</a> </p>\n</li>\n</ul>","more":"<h2 id=\"技术理论\"><a href=\"#技术理论\" class=\"headerlink\" title=\"技术理论\"></a><span id=\"technology\">技术理论</span></h2><ul>\n<li><a href=\"#html\">html</a></li>\n<li><a href=\"#css\">css</a></li>\n<li><a href=\"#less\">less</a></li>\n<li><a href=\"#js\">js</a></li>\n<li><a href=\"#es6\">es6</a></li>\n<li><a href=\"#jquery\">jquery</a></li>\n<li><a href=\"#git\">git</a></li>\n<li><a href=\"#angular\">angular</a></li>\n<li><a href=\"#node\">node</a></li>\n<li><a href=\"#mongo\">mongo+sql</a></li>\n<li><a href=\"#UnitTest\">UnitTest</a></li>\n<li><a href=\"#webpack\">gulp+webpack+babel</a></li>\n<li>[浏览器commonjs ]</li>\n<li><a href=\"#react\">react</a></li>\n</ul>\n<h3 id=\"css\"><a href=\"#css\" class=\"headerlink\" title=\"css\"></a><span id=\"css\">css</span></h3><ul>\n<li>box-shadow可以设置多个，这样可以显示层叠效果<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">box-shadow: 0 1px 1px rgba(0, 0, 0, 0.3),</div><div class=\"line\">0 6px 0 -3px rgba(255, 255, 255, 0.8),</div><div class=\"line\">0 7px 1px -3px rgba(0, 0, 0, 0.3),</div><div class=\"line\">0 43px 0 -6px rgba(255, 255, 255, 0.8),</div><div class=\"line\">0 44px 2px -6px rgba(0, 0, 0, 0.2);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>带有label的checkbox,如果label有for属性，当点击的有for属性的label标签时，对应的Checkbox复选框会被选中，这样就能利用label来修改checkbox样式，首先要隐藏原来的checkbox<a href=\"clownvary.github.io/demo/checkbox_demo/checkbox_css.html\">看这个</a><br>同理其他的控件添加label 只要有for（for对应的是id），那么当点击这label时对应的控件便会获得焦点</li>\n<li>background-size<br>cover 图小于父级块时放大图 填满块<br>contain 图大于父级块时，适当缩小，填满块</li>\n<li><p>background-clip 背景色填充区域， content-box padding-box border-box</p>\n</li>\n<li><p>display:block;如果这样写的话，比如一个div内有多个span,本来是想都在一行显示的，但加了这的span就成了一个块，单独占满一行，其他的只能挤下去,这个时候可以设置inline-block就好了<br>*vertical-align: middle;,垂直居中，常用</p>\n</li>\n<li>css遮罩层<br>内嵌一个绝对定位的div,left top 均设置为0，即可覆盖<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;<span class=\"selector-tag\">div</span> class=<span class=\"string\">\"preview\"</span>&gt;</div><div class=\"line\">           &lt;<span class=\"selector-tag\">img</span> src=<span class=\"string\">\"https://40.media.tumblr.com/a73e79ce9844761d7cdc93d202b5cea1/tumblr_nwh4iomduD1ud7rr3o1_1280.jpg\"</span> alt=<span class=\"string\">\"proj1\"</span> title=<span class=\"string\">\"proj\"</span>&gt;</div><div class=\"line\">           &lt;<span class=\"selector-tag\">div</span> class=<span class=\"string\">\"modal-layout\"</span>&gt;</div><div class=\"line\">             &lt;<span class=\"selector-tag\">div</span> class=<span class=\"string\">\"content\"</span>&gt;</div><div class=\"line\">               &lt;<span class=\"selector-tag\">i</span> class=<span class=\"string\">\"fa fa-fire fa-fw fa-3x\"</span>&gt;&lt;/i&gt;</div><div class=\"line\">             &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">           &lt;/div&gt;</div><div class=\"line\">         &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">         .modal-layout&#123;</div><div class=\"line\">     <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">     <span class=\"attribute\">height</span>: <span class=\"number\">195px</span>;</div><div class=\"line\">     <span class=\"attribute\">background-color</span>: black;</div><div class=\"line\">     <span class=\"attribute\">opacity</span>: <span class=\"number\">0.6</span>;</div><div class=\"line\">     <span class=\"attribute\">z-index</span>: <span class=\"number\">2</span>;</div><div class=\"line\">     <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">     <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</div><div class=\"line\">     <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"less\"><a href=\"#less\" class=\"headerlink\" title=\"less\"></a><span id=\"less\">less</span></h3><ul>\n<li><p>变量 mixin 混合 命名空间（注意只能是属性集不能访问变量，如<code>#base-style &gt; .button</code>不能有<code>#base-style &gt;@color</code>）</p>\n</li>\n<li><p>@import 导入，可以导入less,css，别和important弄混了</p>\n</li>\n<li><p>字符串插值，变量可以用像 @{name} 这样的结构，以类似 ruby 和 php 的方式嵌入到字符</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@base-url:</span> <span class=\"string\">\"http://assets.fnord.com\"</span>;<span class=\"comment\">//一般用在使用静态外部资源时候的配置，就不用js了</span></div><div class=\"line\"><span class=\"attribute\">background-image</span>: url(<span class=\"string\">\"@&#123;base-url&#125;/images/bg.png\"</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"js\"><a href=\"#js\" class=\"headerlink\" title=\"js\"></a><span id=\"js\">js</span></h3><ul>\n<li>函数返回函数的调用<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">name</span>)</div><div class=\"line\"></span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(name);</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">age</span>)</div><div class=\"line\">  </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(age);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//调用如下</span></div><div class=\"line\">test(‘jary’)(<span class=\"number\">34</span>);<span class=\"comment\">//因为第一个方法返回还是个方法，所以直接跟参数</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"es6\"><a href=\"#es6\" class=\"headerlink\" title=\"es6\"></a><span id=\"es6\">es6</span></h3><ul>\n<li><p><a href=\"https://gist.github.com/clownvary/f5e5b77f4b376640f70d02fb4fba7b99\">对照这个看</a></p>\n</li>\n<li><p>let 应用for 循环 局部变量</p>\n</li>\n<li><p>数组、对象、字符解构，应用函数参数赋默认值</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ajax</span></span>(url,&#123;</div><div class=\"line\">  aync=<span class=\"literal\">true</span>,</div><div class=\"line\">  cache=<span class=\"literal\">true</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>string 几个方法 include startWith endWith padStart padEnd<br>1.模板字符串，<code>my name is ${name}</code> </p>\n</li>\n<li><p>Array 方法，for..of keys()、values()、entries(),from,of(将一组数转化为数组)find,findIndex,filter,fill(填充)</p>\n</li>\n<li><p>函数，拥有length属性，<strong><em>表示剩余的没有指定默认值的参数个数</em></strong>，注意不包括rest参数<br>1.rest参数<code>...iterms</code>,是一个后续的参数集合数组，注意rest只能是最后一个参数<br>2.扩展运算符<code>...iterms</code>好比rest的逆运算<br>3.箭头函数，注意如果直接返回一个对象应该用括号包住</p>\n</li>\n<li><p>对象，<br>1.Object.is(),用来比较两个对象是否严格相等，与=== 意思相近，如<code>Object.is(+0,-0)//false</code></p>\n</li>\n<li><p>symbol,为了对象属性的唯一性，新加的js第七种类型，常用来作为标示<br>1.作为对象属相时必须用[]，括住，如</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> s_x=<span class=\"built_in\">Symbol</span>(<span class=\"string\">\"book\"</span>);</div><div class=\"line\"><span class=\"keyword\">let</span> me=&#123;[s_x]:<span class=\"string\">\"sword\"</span>,<span class=\"attr\">name</span>:<span class=\"string\">\"tom\"</span>&#125;;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(me[s_x]);<span class=\"comment\">//me[s_x],和me.name访问形式不同</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>set,不允许有重复的数组，weakset,数组内只能是对象<br>1.set 的for of xxx.keys() 的key和value完全一样</p>\n</li>\n<li><p>map,拥有键值对的集合，相比传统对象，它的键可以是对象，而不一定是字符串</p>\n</li>\n<li><p>尽量使用for of ,别用for in,for in 只能读取键名，不能读取值</p>\n</li>\n<li><p>generator 函数  用来暂停函数，可用在异步编程的同步操作中，通过next()来调用<br>1.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">generator</span>(<span class=\"params\"></span>)</div><div class=\"line\"></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">\"hello\"</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">\"world\"</span>;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">\"ending\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>promise<br>promise的应用主要是可以把任意方法包装后 进行回调</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">   <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">me</span></div><div class=\"line\">  </span>&#123;</div><div class=\"line\">   testPromise(todo)</div><div class=\"line\">   &#123;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">let</span> p;</div><div class=\"line\">    <span class=\"keyword\">if</span>(todo===<span class=\"string\">'xxx'</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">      p=<span class=\"built_in\">Promise</span>.resolve(<span class=\"string\">`成功<span class=\"subst\">$&#123;todo&#125;</span>`</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">    &#123; </div><div class=\"line\">    p=<span class=\"built_in\">Promise</span>.reject(<span class=\"string\">`失败<span class=\"subst\">$&#123;todo&#125;</span>`</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> p;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> demo=<span class=\"keyword\">new</span> me();</div><div class=\"line\">demo.testPromise(<span class=\"string\">'xsxx'</span>).then(<span class=\"function\"><span class=\"params\">x</span>=&gt;</span><span class=\"built_in\">console</span>.log(x),x=&gt;<span class=\"built_in\">console</span>.log(x))</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ... some code</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"comment\">/* 异步操作成功 */</span>)&#123;</div><div class=\"line\">    resolve(value);<span class=\"comment\">//带一个参数是可以把这个参数传给then回调方法</span></div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    reject(error);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">promise.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;<span class=\"comment\">//then有两个参数，成功的和失败的，失败的参数是可选的，一般建议都不写，而是直接写catch捕获错误</span></div><div class=\"line\">  ....</div><div class=\"line\">&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>)</span>&#123;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;).catch()</div></pre></td></tr></table></figure>\n<p>1.一般来说，不要在then方法里面定义Reject状态的回调函数（即then的第二个参数），总是使用catch方法<br>2.promise.all()/race()方法</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">var</span> p = Promise.all([<span class=\"built_in\">p1</span>,<span class=\"built_in\">p2</span>,<span class=\"built_in\">p3</span>])<span class=\"comment\">;//三个promise对象全部resolve后p才resolve</span></div><div class=\"line\"><span class=\"symbol\">var</span> p = Promise.race([<span class=\"built_in\">p1</span>,<span class=\"built_in\">p2</span>,<span class=\"built_in\">p3</span>])<span class=\"comment\">;//三个中有一个率先resolve，p就resolve</span></div></pre></td></tr></table></figure>\n<p>3.promise.resove(),将对象转换成promise对象<code>var jsPromise = Promise.resolve($.ajax(&#39;/whatever.json&#39;));</code><br>  Promise.reject(reason)方法也会返回一个新的Promise实例，该实例的状态为rejected。它的参数用法与Promise.resolve方法完全一致。</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"built_in\">Promise</span>.reject(<span class=\"string\">'出错了'</span>);</div><div class=\"line\"><span class=\"comment\">// 等同于</span></div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> reject(<span class=\"string\">'出错了'</span>))</div><div class=\"line\"></div><div class=\"line\">p.then(<span class=\"literal\">null</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">s</span>)</span>&#123;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(s)</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 出错了</span></div></pre></td></tr></table></figure>\n<p>4.then.done()/finally(),一个用来结束promise()，一个用来表示不管什么状态最后都会执行的操作</p>\n</li>\n<li><p>class<br>1.constructor()构造函数<br>2.类内部的方法直接写就行，不用加function 关键字<br>3.私有方法，es6不提供，可以以下实现</p>\n  <figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">   <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Widget</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">// 公有方法</span></div><div class=\"line\"> foo (baz) &#123;</div><div class=\"line\"><span class=\"keyword\">this</span>._bar(baz);</div><div class=\"line\"> &#125;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">// 私有方法</span></div><div class=\"line\"> _bar(baz) &#123;</div><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.snaf = baz;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">// ...</span></div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<pre><code><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Widget</span> </span>&#123;</div><div class=\"line\"> foo (baz) &#123;</div><div class=\"line\">bar.call(<span class=\"keyword\">this</span>, baz);</div><div class=\"line\"> &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// ...</span></div><div class=\"line\"> &#125;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span><span class=\"params\">(baz)</span> </span>&#123;</div><div class=\"line\"> <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.snaf = baz;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n</code></pre><p>  3.继承，extends<br>   <figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">dog</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  constructor(name,age)</div><div class=\"line\">  &#123;</div><div class=\"line\">  <span class=\"keyword\">super</span>(name);<span class=\"comment\">//必须调用父类构造方法，不然得不到this对象</span></div><div class=\"line\">  <span class=\"keyword\">this</span>.age=age;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>  4.get set ，来对属性的读取进行拦截<br>  5.静态方法，直接加static关键字</p>\n<ul>\n<li><p>Decorator，只能加在类、类的方法上，不能加在函数上,es7的提案，es2015的话不支持</p>\n</li>\n<li><p>module<br>1.export,可以使用as 重命名输出的接口名</p>\n  <figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"> exports&#123;</div><div class=\"line\">  v <span class=\"keyword\">as</span> exp_v<span class=\"comment\">//输出就是exp_v</span></div><div class=\"line\"> &#125;</div><div class=\"line\">注意输出必须是接口</div><div class=\"line\"> <span class=\"comment\">// 报错</span></div><div class=\"line\"> <span class=\"keyword\">export</span> <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">// 报错</span></div><div class=\"line\">  <span class=\"keyword\">var</span> m = <span class=\"number\">1</span>;</div><div class=\"line\"> <span class=\"keyword\">export</span> m;</div><div class=\"line\"> 应该是</div><div class=\"line\"> <span class=\"comment\">// 写法一</span></div><div class=\"line\"> <span class=\"keyword\">export</span> <span class=\"keyword\">var</span> m = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 写法二</span></div><div class=\"line\"><span class=\"keyword\">var</span> m = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">export</span> &#123;m&#125;;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">// 写法三</span></div><div class=\"line\"><span class=\"keyword\">var</span> n = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">export</span> &#123;n <span class=\"keyword\">as</span> m&#125;;</div></pre></td></tr></table></figure>\n<p>2.import</p>\n<ul>\n<li>模块加载一,指定变量加载</li>\n</ul>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//profile</span></div><div class=\"line\"><span class=\"keyword\">export</span>&#123;lastname&#125;</div><div class=\"line\"><span class=\"comment\">//file</span></div><div class=\"line\"> <span class=\"keyword\">import</span> &#123; lastName  &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./profile'</span>;<span class=\"comment\">//导入名称必须和导出一样</span></div><div class=\"line\"> <span class=\"keyword\">import</span> &#123; lastName <span class=\"keyword\">as</span> surname &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./profile'</span>;也可以指定另外的导出名称</div></pre></td></tr></table></figure>\n<ul>\n<li><p>模块加载二，整体加载</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// circle.js</span></div><div class=\"line\"></div><div class=\"line\"> <span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">area</span>(<span class=\"params\">radius</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.PI * radius * radius;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">circumference</span>(<span class=\"params\">radius</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.PI * radius;</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"comment\">// main.js</span></div><div class=\"line\"></div><div class=\"line\"> <span class=\"keyword\">import</span> &#123; area, circumference &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./circle'</span>;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">'圆面积：'</span> + area(<span class=\"number\">4</span>));</div><div class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">'圆周长：'</span> + circumference(<span class=\"number\">14</span>));</div><div class=\"line\"> <span class=\"comment\">//简单写法</span></div><div class=\"line\"> <span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> circle <span class=\"keyword\">from</span> <span class=\"string\">'./circle'</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'圆面积：'</span> + circle.area(<span class=\"number\">4</span>));</div><div class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">'圆周长：'</span> + circle.circumference(<span class=\"number\">14</span>));</div></pre></td></tr></table></figure>\n</li>\n<li><p>模块加载三，默认加载<br>前两种都需要知道输出的接口名字，这种不需要</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"comment\">// export-default.js</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;<span class=\"comment\">//default只能使用一次</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'foo'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// import-default.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> customName <span class=\"keyword\">from</span> <span class=\"string\">'./export-default'</span>;<span class=\"comment\">//可以取任意名字</span></div><div class=\"line\">customName(); <span class=\"comment\">// 'foo'</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"jquery\"><a href=\"#jquery\" class=\"headerlink\" title=\"jquery\"></a><span id=\"jquery\">jquery</span></h3><ul>\n<li><p>$(html,[ownerdoc]) </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"&lt;div&gt;\"</span>, &#123;</div><div class=\"line\"> <span class=\"string\">\"class\"</span>: <span class=\"string\">\"test\"</span>,</div><div class=\"line\"> <span class=\"attr\">text</span>: <span class=\"string\">\"Click me!\"</span>,</div><div class=\"line\"> <span class=\"attr\">click</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  $(<span class=\"keyword\">this</span>).toggleClass(<span class=\"string\">\"test\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;).appendTo(<span class=\"string\">\"body\"</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>$.holdReady(true[false])</p>\n</li>\n<li><p>$.date(key,value)</p>\n</li>\n<li><p>$.queue() 执行队列函数</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"div\"</span>).queue(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      $(<span class=\"keyword\">this</span>).removeClass(<span class=\"string\">\"newcolor\"</span>);</div><div class=\"line\">      $(<span class=\"keyword\">this</span>).dequeue();</div><div class=\"line\">  &#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>$</code>.fn.extend() 扩展元素集方法，$ .extend()扩展jquery对象本身</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">   jQuery.fn.extend(&#123;</div><div class=\"line\">   <span class=\"attr\">check</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">this</span>.checked = <span class=\"literal\">true</span>; &#125;);</div><div class=\"line\">   &#125;,</div><div class=\"line\">   <span class=\"attr\">uncheck</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">this</span>.checked = <span class=\"literal\">false</span>; &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">   &#125;);</div><div class=\"line\">   $(<span class=\"string\">\"input[type=checkbox]\"</span>).check();</div><div class=\"line\">   $(<span class=\"string\">\"input[type=radio]\"</span>).uncheck();</div><div class=\"line\">    ====</div><div class=\"line\">   $.extend(&#123;</div><div class=\"line\">   <span class=\"attr\">min</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</div><div class=\"line\">     &#123; <span class=\"keyword\">return</span> a &lt; b ? a : b; &#125;</div><div class=\"line\">   &#125;</div><div class=\"line\">   &#125;);</div><div class=\"line\">$.min(<span class=\"number\">2</span>,<span class=\"number\">3</span>);</div></pre></td></tr></table></figure>\n<ul>\n<li><p>:even :odd 选择偶数单数<br><code>$(&quot;li:even&quot;)</code></p>\n</li>\n<li><p>:gt :lt 匹配索引值大于或小于给定值得元素<br><code>$(&quot;tr:gt(0)&quot;)</code></p>\n</li>\n</ul>\n<h3 id=\"angular\"><a href=\"#angular\" class=\"headerlink\" title=\"angular\"></a><span id=\"angular\">angular</span></h3><ul>\n<li><p>指令中的link，controller等的依赖参数为<code>$element,$attrs</code>,别写错了，注意$符号，开发时可以不用写依赖，</p>\n<p>后续使用插件即可</p>\n</li>\n<li><p>controller as 就是个语法塘，省去了注入$scope,变成了一个js对象</p>\n</li>\n<li><p>mg-model 可以实现双向绑定，和<code></code>，ng-bind不同，后者是单向的</p>\n</li>\n<li><p>注意$scope.$watch的时候有个坑，监控的对象只能是表达式</p>\n</li>\n</ul>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$scope</span>.name=<span class=\"string\">'sds'</span>;</div><div class=\"line\"><span class=\"variable\">$scope</span>.<span class=\"variable\">$watch</span>(<span class=\"string\">'name'</span>,xxx)<span class=\"regexp\">//</span>必须带引号</div><div class=\"line\">不能是</div><div class=\"line\"><span class=\"variable\">$scope</span>.<span class=\"variable\">$watch</span>(name,xxx)</div></pre></td></tr></table></figure>\n<ul>\n<li><p>创建select用ng-option</p>\n</li>\n<li><p>注意用绝对地址‘html/xxx’不要相对的，’./html/xxx’；</p>\n</li>\n</ul>\n<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"selectedSite\"</span> <span class=\"attr\">ng-options</span>=<span class=\"string\">\"x.site for x in sites\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></div><div class=\"line\">//遍历的是对象，用site作为option的值</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>你选择的是</span><span class=\"template-variable\">&#123;&#123;selectedSite.site&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>网址为</span><span class=\"template-variable\">&#123;&#123;selectedSite.url&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<ul>\n<li><p>nginclude 需要单引号<code>&lt;div ng-include=&quot;&#39;./html/user_list.html&#39;&quot;&gt;&lt;/div&gt;</code></p>\n</li>\n<li><p>动画</p>\n<p>1.引入动画库<br>2.主模块依赖<br>3.内置的如 ng-if ng-repeat之类的指令动画用class,非内置的用ngClass，这种可以跟表达式，因为该指令本身也是内置动画指令的一种，所以会自动添加…add,add-active,之类的class,如果只是用class的话那不会添加，所以要用ngClass</p>\n</li>\n<li><p>指令</p>\n<ol>\n<li>\\’=’双向绑定不可以使用<code></code>,<br>这是一个双向数据绑定前缀标识符<br>使用方法：在元素中使用属性，好比这样<div my-directive age=\"age\"></div>,注意，数据的双向绑定要通过=前缀标识符实现，所以不可以使用<code></code>。,等号后面的age是父级的scope里的</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"node\"><a href=\"#node\" class=\"headerlink\" title=\"node\"></a><span id=\"node\">node</span></h3><ul>\n<li><p>后端不要用webpack,webpack只为前端设计</p>\n</li>\n<li><p>commonjs 规范中expots 和module.exports 区别如下</p>\n</li>\n</ul>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">exports</span>.str = <span class=\"string\">'a'</span>;  </div><div class=\"line\">module.<span class=\"keyword\">exports</span> = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span><span class=\"params\">()</span> <span class=\"comment\">&#123;&#125;</span>;</span>  </div><div class=\"line\"><span class=\"comment\">//要导出的属性直接挂在exports上，要到处的对象或方法挂在module.exports下，或者全部挂在module.exports下</span></div></pre></td></tr></table></figure>\n<ul>\n<li><p>process 对象，有关进程的一切</p>\n</li>\n<li><p>将静态资源即图片css之类的所在路径传给express，之后就能在路径里访问了</p>\n</li>\n<li><p><strong><em>中间件</em></strong>必须调用next()方法，转交控制权，其他的没有next参数，</p>\n</li>\n</ul>\n<h3 id=\"webpack-gulp-webpack-babel\"><a href=\"#webpack-gulp-webpack-babel\" class=\"headerlink\" title=\"webpack+gulp+webpack+babel\"></a><span id=\"webpack\">webpack+gulp+webpack+babel</span></h3><ul>\n<li><p>webpack 只是打包以及一些模块相关的工作，gulp是整个工作流涵盖比较广，可以理解为webpack也是gulp的一个task</p>\n</li>\n<li><p>注意gulp的依赖和顺序执行</p>\n</li>\n<li><p>gulp的src路径匹配有一点需要注意，比如要匹配src下的A目录的所以文件不能写<code>src/*</code>,这样不行，得加上目录<code>src/**/*.js</code>,才行，两个星号是目录，一个是文件</p>\n</li>\n<li><p>webpack loader串联！ 注意<em>执行顺序是从右到左</em>，比如<code>style!css!less</code>,就是先less编译再到css再到style</p>\n</li>\n<li><p>安装webpack后，在js 文件中直接使用commonJs写法 之后打包即可运行，webpack打包过程中会增加支持，，不用使用browsify</p>\n</li>\n<li><p>es6写法的话，看这个例子<a href=\"https://segmentfault.com/a/1190000004457636\">es6</a>,注意如果是babel 6以上需要安装<code>babel-preset-es2015</code></p>\n</li>\n</ul>\n<ul>\n<li><p>es6在webstorm中调试，<br>1.console<br>2.在bundle 即编译过得文件中找到定位，打断点，编译后改变不大，注意不要压缩</p>\n</li>\n<li><p>一般commonchunk常配合多入口打包，才能提取公共部分，<a href=\"https://github.com/webpack/webpack/tree/master/examples/multiple-entry-points\">看这个</a></p>\n</li>\n<li><p>引入第三方库，不用打包，在页面直接引入，在配置文件中设置externals选项</p>\n</li>\n<li><p>webpack(默认配置文件名webpack.config.js) 别忘了 -p 压缩 常用 <code>webpack -p -w</code> </p>\n</li>\n<li><p>图片以及静态资源的打包配置如下</p>\n<figure class=\"highlight subunit\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">test: </span>/\\.(jpg|png|jpeg)$/, loader: \"url?limit=61920&amp;name=./images/[hash:8].[ext]\"</div><div class=\"line\">小于60k会被编译成base64，其他会被放到*指定的输出目录下的imgaes目录下，哈希命名，样式中的路径名字会自动替换</div><div class=\"line\">注意webpack中的publicPath,用来配置静态资源前缀，一般用于cdn或其他，并不生成目录，只有loader生成目录</div></pre></td></tr></table></figure>\n</li>\n<li><p>配置项<code>devtool:&#39;source-map&#39;</code>可以使用sourcemap调试</p>\n</li>\n<li><p>注意当开启css-loader的module模式后，如果样式表里有引用图片资源，路径要往上多写一级，不然会出错，比如原来是<code>./png/xx.png</code>应该写成<code>../img/png/xx.png</code>这是个<a href=\"http://stackoverflow.com/questions/34480228/how-to-load-svg-images-in-webpack\">bug</a></p>\n</li>\n<li><p><strong><em>前端工程的流程可以是这样</em></strong>:<br>1.使用webpack把该打包的打包，该生成的文件生产，不要压缩，不要合并尽量都是独立js或css<br>2.使用gulp对生成的文件再进行相关处理，js（合并）压缩，css 雪碧图 css压缩，文件MD5 和替换</p>\n</li>\n</ul>\n<h3 id=\"react\"><a href=\"#react\" class=\"headerlink\" title=\"react\"></a><span id=\"react\">react</span></h3><ul>\n<li><p>组件开头名称必须大写刚好和angular指令相反</p>\n</li>\n<li><p>组件中class 和for属性要写成className htmlFor,因为前者都是保留字段,注意指的是在组件定义中的时候不是ReactDom使用的时候<br>如果要添加自定义属性，需要加data-前缀,获取时用<code>this.refs.test.getAttribute(&#39;data-attr&#39;)</code>获取</p>\n</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Hello=React.createClass(&#123;</div><div class=\"line\">       render :function () &#123;</div><div class=\"line\">       <span class=\"comment\">//这里要用className才能得到相应的样式</span></div><div class=\"line\">           <span class=\"keyword\">return</span> &lt;div className=<span class=\"string\">'ddd'</span> ref=<span class=\"string\">'test'</span> <span class=\"keyword\">data</span>-attr=<span class=\"string\">'dddd'</span>&gt;&#123;<span class=\"keyword\">this</span>.props.<span class=\"keyword\">class</span>&#125;&lt;/div&gt;;</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;);</div><div class=\"line\">   ReactDOM.render(</div><div class=\"line\">   &lt;Hello name=<span class=\"string\">\"John\"</span> <span class=\"class\"><span class=\"keyword\">class</span>='<span class=\"title\">ddd</span>' /&gt;,</div><div class=\"line\">           <span class=\"type\">document.getElementById</span></span>(<span class=\"string\">'example'</span>)</div><div class=\"line\">   );</div></pre></td></tr></table></figure>\n<ul>\n<li><p>组件中只能有一个顶层标签</p>\n</li>\n<li><p>获取真实dom节点用ref属性</p>\n</li>\n<li><p>React.props.children表示引用组件的所有子节点，一般用React.Children(大写)<br>来遍历，而不用担心子节点的类型</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">React.Children.map(<span class=\"keyword\">this</span>.props.children, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">child</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>&#123;child&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span>;</div><div class=\"line\">      &#125;)</div></pre></td></tr></table></figure>\n<ul>\n<li><p>props state,区分就是前者一旦定义就不再轻易改变，后者是可变的，另外props一半用来外部传参</p>\n</li>\n<li><p>组件内联样式格式<code>style={</code>{opacity: this.state.opacity}<code>}</code> 不能写成别的，双括号</p>\n</li>\n</ul>\n<h2 id=\"项目实践\"><a href=\"#项目实践\" class=\"headerlink\" title=\"项目实践\"></a><span id=\"project\">项目实践</span></h2><ul>\n<li><a href=\"#xxx\">xxx</a></li>\n</ul>\n<h2 id=\"面试准备\"><a href=\"#面试准备\" class=\"headerlink\" title=\"面试准备\"></a><span id=\"interview\">面试准备</span></h2><ul>\n<li><a href=\"https://github.com/h5bp/Front-end-Developer-Interview-Questions/blob/master/Translations/Chinese/README.md#html-相关问题\">前端面试问题</a></li>\n</ul>"}],"PostAsset":[{"_id":"source/_posts/hexo文件夹配置/down.png","slug":"down.png","post":"ciwc8j8nj0000jh9knu8g7vae","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"ciwc8j8nj0000jh9knu8g7vae","tag_id":"ciwc8j8nq0002jh9kykbntzvs","_id":"ciwc8j8nv0007jh9k7gpytj67"},{"post_id":"ciwc8j8nj0000jh9knu8g7vae","tag_id":"ciwc8j8nu0004jh9khfijada4","_id":"ciwc8j8nv0008jh9k8146ndev"},{"post_id":"ciwc8j8nj0000jh9knu8g7vae","tag_id":"ciwc8j8nu0005jh9k4np6l49c","_id":"ciwc8j8nv000ajh9k3zk90z0z"},{"post_id":"ciwc8j8no0001jh9kpuess999","tag_id":"ciwc8j8nu0006jh9k6r1972w8","_id":"ciwc8j8nw000djh9krde24aeq"},{"post_id":"ciwc8j8no0001jh9kpuess999","tag_id":"ciwc8j8nv0009jh9kck50khuj","_id":"ciwc8j8nw000ejh9k7pyxzi9j"},{"post_id":"ciwc8j8no0001jh9kpuess999","tag_id":"ciwc8j8nv000bjh9ktk1lvl7w","_id":"ciwc8j8nx000gjh9k6hbuhrxk"},{"post_id":"ciwc8j8nt0003jh9kapf5zg82","tag_id":"ciwc8j8nw000cjh9krhcrlt97","_id":"ciwc8j8ny000ijh9kclvr7nsb"},{"post_id":"ciwc8j8nt0003jh9kapf5zg82","tag_id":"ciwc8j8nv000bjh9ktk1lvl7w","_id":"ciwc8j8ny000jjh9k0puxmqlr"},{"post_id":"ciwc8j8nt0003jh9kapf5zg82","tag_id":"ciwc8j8ny000hjh9kf7cf0x0f","_id":"ciwc8j8ny000kjh9kwdsdpmcv"},{"post_id":"ciwc8j8o5000ljh9kkxrl2oju","tag_id":"ciwc8j8oa000njh9kmc81qzt9","_id":"ciwc8j8oi000tjh9kgmewerhu"},{"post_id":"ciwc8j8o5000ljh9kkxrl2oju","tag_id":"ciwc8j8nv000bjh9ktk1lvl7w","_id":"ciwc8j8oj000ujh9kdhmnwsph"},{"post_id":"ciwc8j8o5000ljh9kkxrl2oju","tag_id":"ciwc8j8og000ojh9klba5d30g","_id":"ciwc8j8oj000wjh9ktfzy1xou"},{"post_id":"ciwc8j8o5000ljh9kkxrl2oju","tag_id":"ciwc8j8og000pjh9kkixiluz0","_id":"ciwc8j8oj000xjh9kq2kyasg4"},{"post_id":"ciwc8j8o5000ljh9kkxrl2oju","tag_id":"ciwc8j8oh000qjh9kp67ql58v","_id":"ciwc8j8ok000zjh9k5ccv3gns"},{"post_id":"ciwc8j8o5000ljh9kkxrl2oju","tag_id":"ciwc8j8oh000rjh9kimr9o3by","_id":"ciwc8j8ol0010jh9k1l7fuinf"},{"post_id":"ciwc8j8o6000mjh9k0gjzgbso","tag_id":"ciwc8j8oa000njh9kmc81qzt9","_id":"ciwc8j8on0014jh9kcy29c08d"},{"post_id":"ciwc8j8o6000mjh9k0gjzgbso","tag_id":"ciwc8j8nv000bjh9ktk1lvl7w","_id":"ciwc8j8oo0015jh9kbpg7xv2i"},{"post_id":"ciwc8j8o6000mjh9k0gjzgbso","tag_id":"ciwc8j8og000ojh9klba5d30g","_id":"ciwc8j8op0016jh9kgzoyu160"},{"post_id":"ciwc8j8o6000mjh9k0gjzgbso","tag_id":"ciwc8j8og000pjh9kkixiluz0","_id":"ciwc8j8op0017jh9kklzxgkti"},{"post_id":"ciwc8j8o6000mjh9k0gjzgbso","tag_id":"ciwc8j8oh000qjh9kp67ql58v","_id":"ciwc8j8oq0018jh9kxyrq0b84"},{"post_id":"ciwc8j8o6000mjh9k0gjzgbso","tag_id":"ciwc8j8om0012jh9kgq7uglnv","_id":"ciwc8j8oq0019jh9k1sp6ucvd"},{"post_id":"ciwc8j8o6000mjh9k0gjzgbso","tag_id":"ciwc8j8om0013jh9ki2siyw0j","_id":"ciwc8j8oq001ajh9kvq3x2lia"}],"Tag":[{"name":"配置","_id":"ciwc8j8nq0002jh9kykbntzvs"},{"name":"hexo","_id":"ciwc8j8nu0004jh9khfijada4"},{"name":"笔记","_id":"ciwc8j8nu0005jh9k4np6l49c"},{"name":"angular2","_id":"ciwc8j8nu0006jh9k6r1972w8"},{"name":"新手注意","_id":"ciwc8j8nv0009jh9kck50khuj"},{"name":"学习","_id":"ciwc8j8nv000bjh9ktk1lvl7w"},{"name":"TypeScript","_id":"ciwc8j8nw000cjh9krhcrlt97"},{"name":"注意事项","_id":"ciwc8j8ny000hjh9kf7cf0x0f"},{"name":"前端","_id":"ciwc8j8oa000njh9kmc81qzt9"},{"name":"html","_id":"ciwc8j8og000ojh9klba5d30g"},{"name":"js","_id":"ciwc8j8og000pjh9kkixiluz0"},{"name":"css","_id":"ciwc8j8oh000qjh9kp67ql58v"},{"name":"vue","_id":"ciwc8j8oh000rjh9kimr9o3by"},{"name":"angular","_id":"ciwc8j8om0012jh9kgq7uglnv"},{"name":"react","_id":"ciwc8j8om0013jh9ki2siyw0j"}]}}